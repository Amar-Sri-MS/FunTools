#!/usr/bin/env python3

"""
This script is for searching through Fun-on-Demand jobs. It must be run on a
machine that has the /demand/demand mounted. Fun-on-Demand keeps its job files
there.

By default, the script waits until the search completes and outputs results
ordered by date. To output in realtime, use the --unordered option. There are
also options for filtering based on branch (--branches), or tag (--tags). These
accept a comma separated list of branches or tags. It does not find the
intersection of the CSV, it finds jobs matching any of the given values.

The script uses grep, or rg (ripgrep) underneath, so the search pattern is a
grep or rg compatible regex.

Output looks like this:

bturrubiates at qa-ubuntu-02 :: fond_search --tags nightly "Welcome" | head
* 0019-05-30 07:17:00: team-regression@fungible: : crash
  5923620: pke,palladium,pke_teramark,teramark,nightly: master: Nightly TeraMark PKE runs
  http://palladium-jobs.fungible.local:8080/job/5923620
  /demand/demand/Jobs/db2ecf30f7591451-19-05-30-07-17/odp/uartout0.txt
"""

import subprocess
import datetime
import argparse
import pathlib
import signal
import shutil
import sys
import os

DEMAND_FS_ROOT = "/demand/demand"
DEMAND_FS_JOB_PREFIX = DEMAND_FS_ROOT + "/Jobs"
FILE_GLOB = DEMAND_FS_ROOT + "/Jobs/*/odp/uart*.txt"
FOND_URL = "http://palladium-jobs.fungible.local:8080/job/"


class InvalidJobError(Exception):
    pass


class JobMatch:
    def __init__(self, logfile):
        self.logfile = logfile
        self.jobdir = self._get_jobdir_from_logfile(logfile)
        self.jobinfo = {}

        self.jobfile = None
        for f in os.listdir(self.jobdir):
            if "jobid" in f:
                self.jobfile = os.path.join(self.jobdir, f)
                with open(self.jobfile, "r") as f:
                    for line in f:
                        line = line.strip()
                        if line:
                            try:
                                k, v = line.split(":", 1)
                            except:
                                # Sometimes, the line is not properly separated
                                # by a colon. Just ignore these lines.
                                continue

                            self.jobinfo[k.strip()] = v.strip()

                self.jobid = self.jobfile.split("_")[1]

        if not self.jobfile:
            raise InvalidJobError(
                "No jobfile present for job with logfile {logfile}".format(
                    logfile=logfile
                )
            )

        parts = [int(part) for part in self.jobdir.split("-")[1:]]
        self._datetime = datetime.datetime(*parts)

    @staticmethod
    def _get_jobdir_from_logfile(logfile):
        path = pathlib.Path(logfile)
        relative = path.relative_to(DEMAND_FS_JOB_PREFIX)

        return os.path.join(DEMAND_FS_JOB_PREFIX, relative.parts[0])

    @property
    def branch(self):
        # Sometimes there is no branch_funos field in the jobfile.
        return self.jobinfo.get("branch_funos", "?")

    @property
    def machines(self):
        # Some jobs don't have a machine entry in the jobfile.
        return self.jobinfo.get("machines", "?")

    @property
    def tags(self):
        taginfo = self.jobinfo.get("tags", "")

        tags = []
        for tag in taginfo.split(","):
            tag = tag.strip()

            # Sometimes, a job with no tags has the word 'null', and at other
            # times it has an empty string.
            if tag and tag != "null":
                tags.append(tag)

        return set(tags)

    @property
    def email(self):
        return self.jobinfo["email"]

    @property
    def return_code_msg(self):
        return self.jobinfo.get("return_code_msg", "?")

    @property
    def note(self):
        return self.jobinfo["s/w note"]

    @property
    def datetime(self):
        return self._datetime

    def __str__(self):
        url = FOND_URL + self.jobid

        return "* {date}: {email}: {machines}: {msg}\n  {jobid}: {tags}: {branch}: {note}\n  {url}\n  {path}".format(
            date=self.datetime,
            machines=self.machines,
            email=self.email,
            msg=self.return_code_msg,
            jobid=self.jobid,
            tags=",".join(self.tags),
            branch=self.branch,
            note=self.note,
            url=url,
            path=str(self.logfile),
        )


def process_results(results):
    first = True

    results.sort(key=lambda x: x.datetime)
    for result in results:
        if not first:
            print()

        print(result)
        first = False


def apply_job_filter(job, args):
    if args.branches and job.branch not in args.branches:
        return False

    if args.tags and args.tags.isdisjoint(job.tags):
        return False

    if args.file_size_upper_bound:
        size = os.path.getsize(job.logfile)
        if size > args.file_size_upper_bound:
            return False

    return True


def get_command(args):
    match_spec = "-l"

    # Ripgrep is a bit faster, https://github.com/BurntSushi/ripgrep.
    if shutil.which("rg"):
        if args.invert_match:
            match_spec = "--files-without-match"

        cmd = 'rg --no-messages {match_spec} "{pattern}" -j 8 {glob}'
    else:
        if args.invert_match:
            match_spec = "-L"

        cmd = 'grep --no-messages {match_spec} "{pattern}" {glob}'

    return cmd.format(match_spec=match_spec, pattern=args.pattern, glob=args.glob)


def run(args):
    p = subprocess.Popen(
        get_command(args), stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True
    )

    found = False
    first = True
    results = []

    while True:
        match = p.stdout.readline()
        if not match:
            # Check if process has finished
            if p.poll() != None:
                break

            continue

        match = match.decode("utf-8").strip()
        try:
            job = JobMatch(match)
        except InvalidJobError:
            continue
        except PermissionError:
            continue
        except ValueError:
            # File does not match Fun-on-Demand FS path. We expect the filepath
            # to have /demand/demand/Jobs/* form.
            sys.stderr.write(
                "Match {match} is not relative to {prefix}".format(
                    match=match, prefix=DEMAND_FS_JOB_PREFIX
                )
            )
            continue

        if apply_job_filter(job, args):
            if args.unordered:
                if not first:
                    print()

                print(job)
            else:
                results.append(job)

            found = True
            first = False

    if not args.unordered:
        process_results(results)

    return 0 if found else 1


def set_arg(arg):
    return set(arg.split(","))


def handle_args():
    description = "Search Fun-on-Demand jobs. Fun-on-Demand filesystem must be mounted at {demand_fs_root}."
    parser = argparse.ArgumentParser(
        description=description.format(demand_fs_root=DEMAND_FS_ROOT)
    )

    parser.add_argument(
        "-b",
        "--branches",
        default=None,
        type=set_arg,
        help="Only search on specific branches, comma separated",
    )
    parser.add_argument(
        "-t",
        "--tags",
        default=None,
        type=set_arg,
        help="Only search specific tags, comma separated",
    )
    parser.add_argument(
        "--file-size-upper-bound",
        default=None,
        type=int,
        help="Upper bound on file size",
    )
    parser.add_argument(
        "-g",
        "--glob",
        default=FILE_GLOB,
        type=str,
        help="Glob for file search under demand FS",
    )
    parser.add_argument(
        "-u",
        "--unordered",
        action="store_true",
        help="Don't sort results, print in realtime",
    )
    parser.add_argument(
        "-i",
        "--invert-match",
        action="store_true",
        help="Show jobs that don't match the given pattern",
    )
    parser.add_argument("pattern", help="Grep compatible search pattern")
    args = parser.parse_args()

    # Sanity check to print a more helpful error message if the Fun-on-Demand
    # filesystem is not mounted.
    if not os.path.isdir(DEMAND_FS_ROOT):
        msg = "error: Fun-on-Demand filesystem is not mounted at {demand_fs_root}.\n\n"
        sys.stderr.write(msg.format(demand_fs_root=DEMAND_FS_ROOT))
        parser.print_help(file=sys.stderr)
        sys.exit(1)

    path = pathlib.Path(args.glob)
    try:
        path.relative_to(DEMAND_FS_JOB_PREFIX)
    except ValueError:
        msg = "error: Glob {glob} not relative to demand FS job prefix {prefix}\n\n"
        sys.stderr.write(msg.format(glob=args.glob, prefix=DEMAND_FS_JOB_PREFIX))
        parser.print_help(file=sys.stderr)
        sys.exit(1)

    return args


if __name__ == "__main__":
    args = handle_args()

    # Install default handler for SIGPIPE.
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)

    # Like grep, return non-zero exit code if nothing was found.
    sys.exit(run(args))

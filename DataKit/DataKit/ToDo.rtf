{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red67\green81\blue56;}
{\*\expandedcolortbl;;\csgenericrgb\c26300\c31900\c22000;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 HOT\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 - flow control for stream - still uses non-flow-controlled???\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 It seems nobody sets the EOF\
value does not own and cleanup the simple value\
\pard\pardeftab720\partightenfactor0

\f1\fs22 \cf0 \expnd0\expndtw0\kerning0
disabled \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 datakit_bitstream_dest_flush() in append because it requires threaded WU.  Proper solution is either to make all these threaded, but then serialization??? or to have all the append function be WU_CONTINUATION based\cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 Mapping\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \
Syntax:\
: for Type\
= for parameter keywords\
\
Object\
\pard\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
- Need to ref count everything.  Introduce datakit_object _o for object types\
		datakit_retain() .._release() .._destroy() .._alloc(class)  \
		datakit_auto_release()   datakit_auto_free(ptr, size)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \
Function\
- Introduce flatMap and replace filter\
- Introduce reduce\
\
Type\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b \cf0 - Generator = source of <T>; instead of generating all Ts right away, generate piecemeal\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\b0 \cf0 \expnd0\expndtw0\kerning0
- get rid of lazy struct ? and replace with just lazy object\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 - Introduce Optional?\
- Add "description" to convert integer to string, or do casting automatically\
\
Value Tools\
\
datakit\
- group value func\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
- type table use Shortcuts (Array of pairs)\
\
Test\
\pard\pardeftab720\partightenfactor0
\cf0 - develop console test test with \\n\
\
LATER\
Type\
- Generics\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 - add conformsTo\
- add canBeCastTo\
- annotations, e.g. Array's index is UInt32\
\
FuncValues\
- Sort (TypedData, Comparator) -> TypedData\
\
Joiner\
- input is either a bitmap or a set of matches\
- does set intersection\
\
Database\
- set of types + their names\
- DB = [String: Type]\
}
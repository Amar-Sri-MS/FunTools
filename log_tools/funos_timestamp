#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Convert FunOS timestamps from epoch to Linux syslog style:

% funos_timstamp.py [-o output] [input]
"""

from __future__ import print_function
import argparse
import datetime as d, re, sys
import signal

class TSConverter:
    """
    Given output from FunOS, convert timestamps. For example:

    1606763826.634203 => Nov 30 11:17:06.634203

    Methods
    -------
    fix_line(line):
        Fix the timestamp for the provided line.
    fix_file(infile, outfile):
        Given open file handles, infile and outfile, fix the timestamps on
        lines in infile, and write to outfile.
    """

    def __init__(self):
        # Match anything with an opening bracket, a 9-digit floating point
        # timestamp, any number of characters, then a closing bracket, for
        # example:
        #
        # [1608773471.123284.*]
        #
        # Since the sub function replaces the entire match, use
        # lookbehind/lookahead assertions.
        self.matcher = re.compile("(?<=\[)(\d{9,}\.\d+)(?=.*\])")

    @staticmethod
    def _fix_match(match):
        ts = float(match.group(0))

        return d.datetime.fromtimestamp(ts).strftime("%b %d %H:%M:%S.%f")

    def fix_line(self, line):
        """
        Fix the timestamp for the provided line.
        """

        return self.matcher.sub(TSConverter._fix_match, line)

    def fix_file(self, infile, outfile):
        """
        Given open file handles, infile and outfile, fix the timestamps on
        lines in infile, and write to outfile.
        """

        for line in infile:
            outfile.write(self.fix_line(line))

###
##  work out input and output
#
def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--output", action="store", default="-")
    parser.add_argument("input", nargs='?', action="store", default="-")

    args = parser.parse_args()

    if (args.input == "-"):
        infl = sys.stdin
    else:
        infl = open(args.input, "r")

    if (args.output == "-"):
        outfl = sys.stdout
    else:
        outfl = open(args.output, "w")

    converter = TSConverter()
    converter.fix_file(infl, outfl)
        
    
###
##  entrypoint
#
if (__name__ == "__main__"):
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    main()

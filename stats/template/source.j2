{#

Template for stats source code generation

#}
// Source file created by generator.py
// Do not change this file;
// change the gen file {{cfg_file}} instead.


/*
 *  {{fname}}.c
 *
 *  !!!!!AUTO-GENERATED FILE. DO NOT EDIT!!!!
 *
 *  Copyright 2018 Fungible Inc. All rights reserved.
 */

#include <utils/threaded/fun_json.h>
#include <props_bridges/props_bridges.h>
#include <utils/threaded/fun_props.h>
#include <utils/threaded/fun_malloc_threaded.h>
#include <FunSDK/chip/f1/hw/include/core/csr_acc.h>


{% macro block_prop_macro(block) %}
STATS_{{block|upper}}_PROP_PATH
{%- block_prop_macro%}

{% macro element_prop_macro(block,element) %}
STATS_{{block|upper}}_{{element|upper}}_PATH
{%- element_prop_macro%}


{% for header in dyn_headers %}
#include <FunSDK/chip/f1/hw/include/csr/{{header}}_an.h
{%  %}


{% for element in elements %}
{% for entity in entities %}
static uint64_t {{element}}_{{entity}}_stats[{{stats_size}}];
static uint64_t {{element}}_{{entity}}_stats_read(void)
{
	uint64_t rbuf[{{rbuf_size}}] = {0};
	{{csr_red_gen}}
}
{% endfor %}
{% endfor %}

{% for element in elements %}
{% for entity in entities %}
static uint64_t {{element}}_{{entity}}_create_json(void)
{
	const char *keys[] = {{{keys}}};
	struct fun_json *dict0 = fun_json_create_empty_dict();

	{{create_json_gen}}

	return dict0;
}
{% endfor %}
{% endfor %}



#define {{ block_prop_macro(block) }} "stats/{{block}}/"

{% for element in elements %}
#define element_prop_macro(block, element) "{{element}}"
{% endfor %}


{% for element in elements %}
static struct fun_json *{{block}}_{{element}}_generate_json(fun_props_bridge_context_t context)
{
    struct fun_json *dict = fun_json_create_empty_dict();
{% for field in fields %}
	fun_json_dict_add(dict, "{{field}}",fun_json_no_copy_no_own,
						{{element}}_{{field}}_create_json(), false);
{% endfor %}
    return dict;
}
{% endfor %}


void {{block}}_props_bridge_install(void)
{
{% for element in elements %}
	struct fun_props_bridge_point *{{block}}_{{element}}_bridge MAYBE_UNUSED =
			fun_props_install_bridge_point(
				block_prop_macro(block) element_prop_macro(block, element),
				NULL, {{block}}_{{element}}_generate_json);
{% endfor %}
}

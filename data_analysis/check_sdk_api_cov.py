#!/usr/bin/env python3

"""Check SDK APIs test code coverage

   Copyright (c) 2022 Fungible. All rights reserved.

    Preconditions
    -------------
    This script uses api summary (--sdk_api) and function coverage summary (--cov) generated by gcovr.

    Examples
    --------

    >>> python ./check_sdk_api_cov.py --sdk_api ../ApiSummarizer/sdk_api.csv --cov ./func_cov.csv --output_html ./sdk_api.html --output_csv ./sdk_api_updated.csv --output_dir .

    Checks
    ------
    static check:
    >>> mypy ./check_sdk_api_cov.py

    format:
    >>> black ./check_sdk_api_cov.py

"""

"""
TODO:

- update the generated html with meta information
> total %
> html link to func summary, http://jenkins-sw-master.fungible.local/ci/job/scheduled/job/coverage/103/Coverage_20Reports/all/index.functions.html
> also publish API html file... 

- top level script to call this automatically

"""


import os
import argparse
import sys
from pathlib import Path
from typing import Iterable, Any, List, Optional, Union, Callable, TextIO, Dict, Tuple

try:
    # for table
    from tabulate import tabulate
    import pandas as pd
except ImportError:
    print("{}: Import failed!".format(__file__))
    print("Install missing modules")
    print(">>> pip install tabulate pandas")
    sys.exit()

NOTE_STR_1 = "NOTE: gcovr does not generate function coverage summary for some functions that are defined in heaaders (i.e. static functions), around 13 percent of the of the total functions are not reported because of this)."


def _get_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("--sdk_api", type=str, help="SDK APIs csv file")
    parser.add_argument("--cov", type=str, help="Coverage data in csv file")
    parser.add_argument("--output_dir", type=str, default=".", help="Output directory")
    parser.add_argument("--output_html", type=str, help="Output html file")
    parser.add_argument("--output_csv", type=str, help="Output csv file")

    args = parser.parse_args()

    return args


def _update_coverage_for_sdk_api(
    df_api: pd.DataFrame, df_cov: pd.DataFrame
) -> Tuple[pd.DataFrame, float]:
    """update coverage for SDK APIs
        Use df_cov to update df_api

    Parameters
    ----------
    df_api : pd.DataFrame
        SDK APIs
    df_cov : pd.DataFrame
        Coverage data

    Returns
    -------
    pd.DataFrame : updated df_api
    float : coverage percent

    """

    api_func_name = df_api["proto_name"].tolist()
    cov_func_name = df_cov["Function"].tolist()

    # add column to df_api
    df_api["coverage"] = False

    # NOTE: gcovr does not generate function coverage summary for some functions that are defined
    # in heaaders (i.e. static functions), around 13 % of the static inline functions are not
    # reported in the summary (regardless of their calling status)

    # update df_api coverage column
    for func_name in api_func_name:
        if func_name in cov_func_name:
            # check if df_cov "Call count" is "not called", then update coverage column
            if (
                df_cov.loc[df_cov["Function"] == func_name, "Call count"].values[0]
                != "not called"
            ):

                df_api.loc[df_api["proto_name"] == func_name, "coverage"] = True

    # coverage percentage
    cov_percent = df_api["coverage"].sum() / len(df_api) * 100

    return df_api, cov_percent


def _gen_summary_html(
    df_api: pd.DataFrame, cov_percent: float, output_html: str
) -> None:
    """Prepare summary html and save to file

    Parameters
    ----------
    df_api : pd.DataFrame
        SDK APIs
    cov_percent : float
        Coverage percent
    output_html : str
        Output html file

    Returns
    -------
    None

    """

    # summary
    summary = f"SDK APIs coverage: {cov_percent:.2f}%"

    # use more readable column names
    df_api.rename(
        columns={
            "proto_name": "Function",
            "coverage": "Coverage Status",
            "filename": "File",
        },
        inplace=True,
    )

    # table
    table_str = df_api[["Function", "Coverage Status", "File"]].to_html(
        # index=False,
        justify="center",
        float_format="{:.2f}".format,
    )

    html_header_str = f"<br>  <br> <h1> {summary} </h1> <br>"
    if NOTE_STR_1:
        html_header_str += f"<h4> {NOTE_STR_1} </h4> <br>"
    html_footer_str = """<br> <br>"""

    # prepend html_header_stsr to html_str
    html_str = html_header_str + table_str + html_footer_str

    # save html_str to file
    with open(output_html, "w", encoding="utf-8") as f:
        f.write(html_str)


def main() -> None:
    """Main function"""

    args = _get_args()
    output_html = os.path.join(args.output_dir, args.output_html)
    output_csv = (
        os.path.join(args.output_dir, args.output_csv)
        if args.output_csv is not None
        else None
    )

    # read csv
    df_api = pd.read_csv(args.sdk_api)
    df_cov = pd.read_csv(args.cov)

    df_api, cov_percent = _update_coverage_for_sdk_api(df_api, df_cov)

    # save df_api to csv
    if output_csv:
        df_api.to_csv(output_csv)

    # save df_api to html
    _gen_summary_html(df_api, cov_percent, output_html)

    print(f"SDK APIs coverage:              {cov_percent:.2f}%")
    print(f"Saving summary to html file:    {output_html}")
    print(f"Saving summary to csv file:     {output_csv}")


if __name__ == "__main__":
    main()

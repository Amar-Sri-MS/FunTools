#!/usr/bin/python2.7

# input: .instr_dasm (generated by instr_dasm.py)
# output: .instr_count

import os
import sys
import argparse
import subprocess
import itertools
import instr_count_query

is_debug = False

def dprint(s):
  if is_debug:
    print >> sys.stderr, s

def count_fname_cmp(a, b):
  a0 = abs(a[0])
  b0 = abs(b[0])
  if a0 == b0:
    if a[1] == b[1]:
      return 0
    return -1 if a[1] < b[1] else 1
  return -1 if a0 < b0 else 1

# sometimes i see constprop moving to different location getting flagged as ADD and DEL
#        +3558   jrdump_sec_sha_cmn_dbg.constprop.1444   ADD
#        -3558   jrdump_sec_sha_cmn_dbg.constprop.1357   DEL
def constprop_moves_remove(data):
  i = len(data) - 1
  while i > 0:
    v = data[i]
    if len(v) > 2 and '.' in v[1]:
      j = i - 1
      vfunc = v[1].rsplit('.', 1)[0]
      while j >= 0:
        p = data[j]
        if abs(abs(p[0]) - abs(v[0])) > 5:
          break
        if p[1].rsplit('.', 1)[0] == vfunc:
          if p[2] != v[2]:
            del data[i]
            del data[j]
            i = i - 1
            break

        j = j - 1

    i = i - 1

  return data

def instr_count_diff(in_file1, in_file2, out_f, is_track_add_del=True):
  data1 = instr_count_query.group_data_prepare(in_file1)
  data2 = instr_count_query.group_data_prepare(in_file2)

  data = []

  d1 = set(data1.keys())
  d2 = set(data2.keys())

  if is_track_add_del:
    for fname in d2 - d1:
      c2 = data2[fname][0]
      data.append([c2, fname, 'ADD'])

    for fname in d1 - d2:
      c1 = data1[fname][0]
      data.append([-c1, fname, 'DEL'])

    data = sorted(data, cmp=count_fname_cmp, reverse=True)
    data = constprop_moves_remove(data)

  for fname in sorted(d1 & d2):
    c1 = data1[fname][0]
    c2 = data2[fname][0]
    c_diff = c2 - c1
    if c_diff:
      data.append([c_diff, fname])

  dprint('sort by instr_count diff')
  data = sorted(data, cmp=count_fname_cmp, reverse=True)

  # write output
  for v in data:
    out_f.write('%+d\t%s\n' % (v[0], '\t'.join(v[1:])))

  return data

def main():
  def usage():
    print 'usage: %s [-a] <instr_count_file1> <instr_count_file2>' % sys.argv[0]

  parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
  parser.add_argument('-a', action='store_true', default=False, help='include added and deleted functions')
  parser.add_argument('instr_count_file1')
  parser.add_argument('instr_count_file2')
  args = parser.parse_args()

  for f in [args.instr_count_file1, args.instr_count_file2]:
    if not f.endswith('.instr_count'):
      print 'WARNING: File does not end with .instr_count: %s' % f
    if not os.path.isfile(f):
      print 'File does not exist: %s' % f
      usage()
      return -1

  out_f = sys.stdout
  data = instr_count_diff(args.instr_count_file1, args.instr_count_file2, out_f, args.a)
  return 0

if __name__ == '__main__':
  sys.exit(main())

Instruction Count

To meaure the inefficiency in code generation, this tools measures how many asm instructions are generated for each source code line.
The basic principle is
  1) extract asm statements from either funos-f1-emu or samurai annotate fiels.
  2) pass the addresses through gdb to get <func+offset> file:line.
  3) extract unique asm code addresses
  4) sort it by "file:line" as primary key and "func+offset" as secondary key
  5) group it by "file:line" as primary key and "func" as secondary key.
  6) count the groups
  7) sourt by group count
The output show costliest C lines w.r.t. number of asm instructions.
(Note: macro lines can potentially show lot of instr count)

There are two scripts here

  instr_dasm.py
    this scripts does steps (1) and (2).
    input to this file is funos binary and optionally a samurai file
    outputs enhanced dasm to a file ending with .instr_dasm
    (Note: instr_dasm.py script can take like 10 minutes when processing funos binary)

    example:
      instr_dasm.py funos-f1-emu                # outputs funos-f1-emu.instr_dasm
      instr_dasm.py funos-f1-emu samurai_dir    # outputs samurai_dir/samurai.instr_dasm


  instr_dasm.py
    this script does steps (3) to (7).
    input to this file is .instr_dasm file generated by instr_dasm.py
    outputs .instr_count file.
    following optional flags are accepted by this script
        -s <src_dir1,src_dir2,...>  : use these dirs for source code lookup (default:None)
        -i                          : show instructions (default:False)
        -u                          : show unknown file locations (default:False)

    example:
      instr_count.py funos-f1-emu.instr_dasm                        # outputs funos-f1-emu.instr_count
      instr_count.py samurai.instr_dasm                             # outputs samurai.instr_count
      instr_count.py -s <path_to_FunOS> funos-f1-emu.instr_dasm     # outputs funos-f1-emu.instr_count with source code
      instr_count.py -i samurai.instr_dasm                          # outputs samurai.instr_count with asm instructions

Sample outputs

    funos-f1-emu.instr_dasm
        ...
        0xa80000000035ef8c <fun_host_rx+272> platform/mips64/regfile.h:77 sd    a0,488(a2)
        0xa80000000035ef90 <fun_host_rx+276> networking/vrouter/forwarding.c:966 bnezc  v1,a80000000035f570 <$L73489>
        0xa80000000035ef94 <fun_host_rx+280> networking/vrouter/forwarding.c:967 lhu    v0,0(s4)
        0xa80000000035ef98 <fun_host_rx+284> networking/vrouter/forwarding.c:967 andi   v1,v0,0x40
        0xa80000000035ef9c <fun_host_rx+288> networking/vrouter/forwarding.c:967 bnezc  v1,a80000000035f134 <$L73490>
        0xa80000000035efa0 <fun_host_rx+292> networking/vrouter/forwarding.c:971 ld     a3,8(s4)
        0xa80000000035efa4 <fun_host_rx+296> build/f1-emu/generated/nu_headers.h:1655 li        a1,3
        0xa80000000035efa8 <fun_host_rx+300> networking/ethernet/eth.h:110 lhu  v0,4(s4)
        0xa80000000035efac <fun_host_rx+304> networking/vrouter/forwarding.c:978 lhu    v1,6(s4)
        0xa80000000035efb0 <fun_host_rx+308> networking/ethernet/eth.h:110 daddu        v0,a3,v0
        0xa80000000035efb4 <fun_host_rx+312> build/f1-emu/generated/nu_headers.h:1660 dsrl      a0,v1,0x8
        ...

    samurai.instr_dasm
        ...
        0xa800000000489be0 <etp_wu_prepare+260> hw/f1/hw_nu_wu.c:416 and        v0=0000000000000000 a0:018000420030004c v0:2c38000000000000
        0xa800000000489be4 <etp_wu_prepare+264> hw/f1/hw_nu_wu.c:414 bnez       v0:0000000000000000 a800000000489e08 <$L117875>
        0xa800000000489be8 <etp_wu_prepare+268> hw/f1/hw_nu_wu.c:414 or         s3=000000000000004c a2:000000000000004c a1:0000000000000000
        0xa800000000489bec <etp_wu_prepare+272> networking/ethernet/eth.h:110 lhu               v0=0000000000000030 4(s0:a800000007905100)
        0xa800000000489bf0 <etp_wu_prepare+276> networking/ethernet/eth.h:110 ld                v1=880000332f968000 8(s0:a800000007905100)
        0xa800000000489bf4 <etp_wu_prepare+280> networking/ethernet/eth.h:110 daddu             v1=880000332f968030 v1:880000332f968000 v0:0000000000000030
        0xa800000000489bf8 <etp_wu_prepare+284> hw/f1/hw_dmae.h:48 bnez         v1:880000332f968030 a800000000489de4 <$L117876>
        0xa800000000489bfc <etp_wu_prepare+288> hw/f1/hw_dmae.h:48 move         a0=0000000000000000 zero
        0xa800000000489de4 <etp_wu_prepare+776> platform/mips64/mm.c:107 li             a1=0000000000000001 1
        0xa800000000489de8 <etp_wu_prepare+780> platform/mips64/mm_mips64.h:129 li              v0=ffffffffffffffff -1
        0xa800000000489dec <etp_wu_prepare+784> platform/mips64/mm_mips64.h:129 dsll32          v0=8000000000000000 v0:ffffffffffffffff 0x1f
        0xa800000000489df0 <etp_wu_prepare+788> platform/mips64/mm.c:107 dsll32         a1=4000000000000000 a1:0000000000000001 0x1e
        ...

    cat funos-f1-emu.instr_count | grep networking | head -20
        ...
        496     networking/vrouter/forwarding.c:1747    <etp_prepare_offload_params+204>...<etp_prepare_offload_params+2192>    if (hdr_params->o_eth_proto == FUN_ETH_PROTO_IPV6) {
        110     networking/tcpip/tcp_xmt_handlers.c:1526        <tcp_vp_2_xmt_vp_xmt_desc+728>...<tcp_vp_2_xmt_vp_xmt_desc+4464>        hu_dma_cmd_list->addr = sgl_dma_req->sgl[ix].addr;
        103     networking/tcpip/tcp_xmt_handlers.c:947 <tcp_hu_xmt_payload_dma_done+584>...<tcp_hu_xmt_payload_dma_done+2076>  nu_dma_cmd_list->addr = payload_dma_req->sgl[i].addr;
        92      networking/vrouter/forwarding.c:291     <etp_wu_prepare+2196>...<etp_wu_prepare+4004>   word16 = ((dst[i] << 8) & 0xFF00) + (dst[i + 1] & 0xFF);
        82      networking/vrouter/forwarding.c:286     <etp_wu_prepare+2176>...<etp_wu_prepare+3956>   word16 = ((src[i] << 8) & 0xFF00) + (src[i + 1] & 0xFF);
        82      networking/vrouter/forwarding.c:1760    <etp_prepare_offload_params+2692>...<etp_prepare_offload_params+3028>   if (hdr_params->o_eth_proto == FUN_ETH_PROTO_IPV6) {
        74      networking/ethernet/vi.c:352    <vi_process_cpu_bound_pkt+252>...<vi_process_cpu_bound_pkt+2984>        }
        69      networking/tcpip/tcp_payload.c:1446     <tcp_payload_dump_page_alloc+452>...<tcp_payload_dump_page_alloc+800>   printf("%s: payload_req->buffers[%d][addr %p, length %p]\n",
        68      networking/vrouter/test_utils.c:1775    <nu_test_dpcsh_proc+288>...<nu_test_dpcsh_proc+2844>    }
        64      networking/vrouter/net_stats.c:103      <get_vp_pkt_stats>...<get_vp_pkt_stats+252>     {
        59      networking/rdma/rdma.c:131      <fun_sgl_from_wr_sgl+164>...<fun_sgl_from_wr_sgl+724>   LOG_DEBUG("%s: MR[%x] ADDR[0x%" PRIx64 "] BASE[0x%" PRIx64
        59      networking/tcpip/tcp.c:901      <tcp_host_le_add+356>...<tcp_host_le_add+600>   memcpy(&kd->key, &n2p.gkb0, HW_LE_REQ_IND_KEY_SZ);
        56      networking/tcpip/tcp_payload.c:491      <tcp_payload_sgl_get+188>...<tcp_payload_sgl_get+1020>  dma_req->sgl[ix].addr = sgl_hdr->payload_sgl_head->addr;
        55      networking/tcpip/tcp_xmt_handlers.c:1554        <tcp_vp_2_xmt_vp_xmt_desc+1272>...<tcp_vp_2_xmt_vp_xmt_desc+4284>       hu_dma_cmd_list->addr = dma_va_to_pa(payload_alloc_req->buffers[ix].addr);
        55      networking/vrouter/l2.c:214     <l2_flood_to_bd.part.5+1552>...<l2_flood_to_bd.part.5+2288>     SYSLOG(NULL, DEBUG, THIS_MODULE,
        55      networking/vrouter/sample.c:399 <vi_process_cpu_bound_pkt+984>...<vi_process_cpu_bound_pkt+3596>        LOG_DEBUG("\n Sampler FRV mric: %u sric: %u ecn: %u pct: %u "
        53      networking/tcpip/tcp_xmt_handlers.c:2549        <tcp_vp_2_xmt_vp_update_xmt_payload+460>...<tcp_vp_2_xmt_vp_update_xmt_payload+2796>    nu_dma_cmd_list->addr = dma_va_to_pa((uint64_t)f1_dst_sgl->addr);
        52      networking/vrouter/forwarding.c:699     <fabric_l2_recv+416>...<fabric_l2_recv+1584>    }
        52      networking/vrouter/test_utils.c:318     <send_copy_to_fpg+192>...<send_copy_to_fpg+420> SYSLOG(NULL, DEBUG, THIS_MODULE, "%s failed for size "
        51      networking/tcpip/tcp_rcv_handlers.c:213 <tcp_vp_2_rcv_vp_from_net+88>...<tcp_vp_2_rcv_vp_from_net+1216> SYSLOG(NULL, INFO, THIS_MODULE,
        ...

Future
  instr_dasm files are very interesting. there is potential to extract good information from it.
    - which function is consuming more stack ?
    - ...

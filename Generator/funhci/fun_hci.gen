/*
 *  A d m i n   R e q u e s t s   and   R e s p o n s e s
 */

ENUM fun_admin_op
  FUN_ADMIN_OP_INVALID = 0x00
  FUN_ADMIN_OP_BIND = 0x01 /* Bind Nodes into Flow Graph */
  FUN_ADMIN_OP_EPFN = 0x10 /* PCIe EndPoint Function Flow Node */
  FUN_ADMIN_OP_EPCQ = 0x11 /* PCIe EndPoint Completion Queue Flow Node */
  FUN_ADMIN_OP_EPSQ = 0x12 /* PCIe EndPoint Submission Queue Flow Node */
  FUN_ADMIN_OP_PORT = 0x13 /* Switch Port Flow Node */
  FUN_ADMIN_OP_ETH = 0x14 /* Ethernet processing Flow Node */
  FUN_ADMIN_OP_VI = 0x15 /* Virtual Interface Flow Node */
  FUN_ADMIN_OP_SOCKET = 0x16 /* Socket Flow Node */
  FUN_ADMIN_OP_TCP = 0x17 /* TCP Flow Node */
  FUN_ADMIN_OP_NSS = 0x18 /* NVMe SubSystem Flow Node */
  FUN_ADMIN_OP_VOL = 0x19 /* Storage Volume Flow Node */
  FUN_ADMIN_OP_CONCAT = 0x1A /* Storage Concatinated Volume Flow Node */
  FUN_ADMIN_OP_CRYPTO = 0x1B /* Crypto Flow Node */
END

FLAGS fun_admin_req_common_flag
  FUN_ADMIN_REQ_COMMON_FLAG_RSP = 0x0001 /* Generate a Request Response Message */
  FUN_ADMIN_REQ_COMMON_FLAG_HEAD_WB = 0x0002 /* Generate a HEAD Write Back */ 
  FUN_ADMIN_REQ_COMMON_FLAG_INT = 0x0004 /* Generate an Interrupt after request has been processed */
END

STRUCT fun_admin_req_common
  0 63:56  uint8_t op /* see fun_admin_op enum */
  0 55:48  uint8_t len8 /* length of the request in units of 8-bytes */
  0 47:32 uint16_t flags /* see fun_admin_req_common flag enum */
  0 31:00 uint32_t rsvd0
  1 63:00 uint64_t cookie /* caller cookie, returned in response */
END 

STRUCT fun_admin_rsp_common
  0 63:56  uint8_t op /* see fun_admin_op enum, copied from request */
  0 55:08  uint8_t rsvd0[6]
  0 07:00  uint8_t ret /* see fun_ret enum */
  1 63:00 uint64_t cookie /* caller cookie, copied from request */
END 

STRUCT fun_admin_write48_req
  0 63:56 uint64_t key
  0 55:48 uint64_t rsvd0
  0 47:00 uint64_t data
END

STRUCT fun_admin_write48_rsp
  0 63:56 uint64_t key
  0 55:48 uint64_t ret
  0 47:00 uint64_t data
END

STRUCT fun_admin_read48_req
  0 63:56 uint64_t key
  0 55:00 uint64_t rsvd0
END

STRUCT fun_admin_read48_rsp
  0 63:56 uint64_t key
  0 55:48 uint64_t ret
  0 47:00 uint64_t data
END

/*
 *  BIND Request/Response
 */
ENUM fun_admin_bind_type
  FUN_ADMIN_BIND_TYPE_INVALID = 0x00
  FUN_ADMIN_BIND_TYPE_EPCQ = 0x01
  FUN_ADMIN_BIND_TYPE_EPSQ = 0x02
  FUN_ADMIN_BIND_TYPE_PORT = 0x03 
  FUN_ADMIN_BIND_TYPE_VI_TO_NETWORK = 0x04
  FUN_ADMIN_BIND_TYPE_VI_TO_HOST = 0x05
  FUN_ADMIN_BIND_TYPE_ETH = 0x06
  FUN_ADMIN_BIND_TYPE_SOCKET = 0x07
  FUN_ADMIN_BIND_TYPE_TCP = 0x08
  FUN_ADMIN_BIND_TYPE_NSS = 0x09
  FUN_ADMIN_BIND_TYPE_VOL = 0x0a
  FUN_ADMIN_BIND_TYPE_CONCAT = 0x0b
  FUN_ADMIN_BIND_TYPE_CRYPTO = 0x0c
  FUN_ADMIN_BIND_TYPE_NU = 0x0d
END

ENUM fun_admin_bind_const
  FUN_ADMIN_BIND_FLOW_MAX = 4
END

STRUCT fun_admin_bind_entry
  0 63:56  uint8_t type
  0 55:32  uint8_t rsvd0[3]
  0 31:00 uint32_t id
END

STRUCT fun_admin_bind_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  _ _:_ fun_admin_bind_entry entry[0]
END

STRUCT fun_admin_bind_rsp
  0 63:00 fun_admin_rsp_common bind_rsp_common 
  1 63:00 ...
END

ENUM fun_admin_subop
  FUN_ADMIN_SUBOP_INVALID = 0x00
  FUN_ADMIN_SUBOP_LIST_CREATED = 0x01
  FUN_ADMIN_SUBOP_LIST_ACTIVE = 0x02
  FUN_ADMIN_SUBOP_CREATE = 0x10
  FUN_ADMIN_SUBOP_DESTROY = 0x11
  FUN_ADMIN_SUBOP_READ = 0x012
  FUN_ADMIN_SUBOP_WRITE = 0x13
END

/*
 *  EPCQ Request/Response
 */
FLAGS fun_admin_epcq_create_flag
  FUN_ADMIN_EPCQ_CREATE_FLAG_ALLOCATOR = 0x01
  FUN_ADMIN_EPCQ_CREATE_FLAG_INT_EPCQ = 0x02
  FUN_ADMIN_EPCQ_CREATE_FLAG_ENTRY_WR_TPH = 0x04
  FUN_ADMIN_EPCQ_CREATE_FLAG_SL_WR_TPH = 0x08
END

STRUCT fun_admin_epcq_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION epcq_req_subop u
    STRUCT fun_admin_epcq_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_epcq_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: epcqid */
      3 63:24  uint8_t rsvd1[5]
      3 23:16  uint8_t entry_size_log2 /* log2 of epcq entry size in bytes */
      3 15:00 uint16_t nentries /* number of entries in epcq */
      4 63:00 uint64_t address /* DMA address of epcq */
      5 63:40  uint8_t rsvd2[3]
      5 39:32  uint8_t intcoal_kbytes /* interrupt coalescing, number of kbytes or 0 to disable */
      5 31:24  uint8_t intcoal_holdoff_nentries /* interrupt coalescing, number of entries or 0 to disable */
      5 23:16  uint8_t intcoal_holdoff_usecs /* interrupt coalescing, number of usess or 0 to disable */
      5 15:00 uint16_t intid /* FLAG_INT_EPSQ=0: interrupt MSI/-X vectorid, FLAG_INT_EPSQ=1: interrupt concentrator epcqid */
      6 63:48 uint16_t tph_cpuid /* CPUID for TPH */
      6 47:00  uint8_t rsvd3[6]
    END
    STRUCT fun_admin_epcq_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* epcqid to destroy */
    END
    STRUCT fun_admin_epcq_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t startid /*  */
    END
  END
END

STRUCT fun_admin_epcq_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION epcq_rsp_subop u
    STRUCT fun_admin_epcq_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id
    END
    STRUCT fun_admin_epcq_destroy_rsp destroy
      2 63:56  uint8_t epcq_rsp_destroy_subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id
    END      
  END
END

/*
 *  EPSQ Request/Response
 */
FLAGS fun_admin_epsq_create_flag
  FUN_ADMIN_EPSQ_CREATE_FLAG_NONE = 0x00
  FUN_ADMIN_EPSQ_CREATE_FLAG_ALLOCATOR = 0x01 /* Enable EPSQ allocator */
  FUN_ADMIN_EPSQ_CREATE_FLAG_INT_EPSQ = 0x02 /* Use a EPSQ as interrupt concentrator */
  FUN_ADMIN_EPSQ_CREATE_FLAG_ENTRY_RD_TPH = 0x04 /* Enable EPSQ entry read TPH */
  FUN_ADMIN_EPSQ_CREATE_FLAG_GL_RD_TPH = 0x08 /* Enable Gather List read TPH */
  FUN_ADMIN_EPSQ_CREATE_FLAG_HEAD_WB_ADDRESS = 0x10 /* Enable HEAD WriteBack to address */
  FUN_ADMIN_EPSQ_CREATE_FLAG_HEAD_WB_ADDRESS_TPH = 0x20 /* Enable HEAD WriteBack TPH */
  FUN_ADMIN_EPSQ_CREATE_FLAG_HEAD_WB_EPCQ = 0x40 /* Enable HEAD WriteBack to EPCQ */
  FUN_ADMIN_EPSQ_CREATE_FLAG_RQ = 0x80 /* Submission Queue is a RQ */
END

STRUCT fun_admin_epsq_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION epsq_req_subop u
    STRUCT fun_admin_epsq_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_epsq_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: epsqid */
      3 63:32 uint32_t epcqid /* assiciated epcq */
      3 31:24  uint8_t rsvd1
      3 23:16  uint8_t entry_size_log2 /* log2 of epsq entry size in bytes */
      3 15:00 uint16_t nentries /* number of entries in epsq */
      4 63:00 uint64_t address /* DMA address of epsq */
      5 63:40  uint8_t rsvd2[3]
      5 39:32  uint8_t intcoal_kbytes /* interrupt coalescing, number of kbytes or 0 to disable */
      5 31:24  uint8_t intcoal_holdoff_nentries /* interrupt coalescing, number of entries or 0 to disable */
      5 23:16  uint8_t intcoal_holdoff_usecs /* interrupt coalescing, number of usess or 0 to disable */
      5 15:00 uint16_t intid /* FLAG_INT_EPSQ=0: interrupt MSI/-X vectorid, FLAG_INT_EPSQ=1: interrupt concentrator epsqid */
      6 63:48 uint16_t tph_cpuid /* CPUID for TPH */
      6 47:08  uint8_t rsvd3[5]
      6 07:00  uint8_t head_wb_size_log2 /* log2 of head write back size */
      7 63:00 uint64_t head_wb_address /* DMA address for head writeback */
    END
    STRUCT fun_admin_epsq_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* epsqid to destroy */
    END  
    STRUCT fun_admin_epsq_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_epsq_create_flag enum */
      2 31:00 uint32_t startid /*  */
    END   
  END
END

STRUCT fun_admin_epsq_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION epsq_rsp_subop u
    STRUCT fun_admin_epsq_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* created epsqid if epsq_rsp_common.rsp_common_status = 0 or N/A */
    END
    STRUCT fun_admin_epsq_rsp_destroy destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id
    END      
  END
END

/*
 * PORT params enums
 */

/*
 * Breakout mode
 */
ENUM fun_port_brkout_mode 
 FUN_PORT_BRKMODE_NONE  = 0x00
 FUN_PORT_BRKMODE_2X    = 0x01
 FUN_PORT_BRKMODE_4X    = 0x02
END

/*
 * port speed - bitmap 
 */
FLAGS fun_port_speed
 FUN_PORT_SPEED_AUTO = 0x00
 FUN_PORT_SPEED_10M  = 0x01
 FUN_PORT_SPEED_100M = 0x02
 FUN_PORT_SPEED_1G	 = 0x04
 FUN_PORT_SPEED_10G	 = 0x08
 FUN_PORT_SPEED_25G	 = 0x10
 FUN_PORT_SPEED_40G	 = 0x20
 FUN_PORT_SPEED_50G  = 0x40
 FUN_PORT_SPEED_100G = 0x80
END

ENUM fun_port_duplex_mode
 FUN_PORT_FULL_DUPLEX = 0x00
 FUN_PORT_HALF_DUPLEX = 0x01
END

ENUM fun_port_admin_state 
 FUN_PORT_SHUT 	= 0x00
 FUN_PORT_NO_SHUT = 0x01
 FUN_PORT_ERR_DISABLED = 0x02
 FUN_PORT_HW_ERR = 0x03
END
 
ENUM fun_port_fec_type 
 FUN_PORT_FEC_OFF = 0x00
 FUN_PORT_FEC_RS = 0x01
 FUN_PORT_FEC_FC = 0x02
END

ENUM fun_port_loopbackmode 
 FUN_PORT_LPBK_NONE = 0x00
 FUN_PORT_LPBK_MAC = 0x01
 FUN_PORT_LPBK_SERDES = 0x02
 FUN_PORT_LPBK_RT = 0x03
END

ENUM fun_port_link_status 
 FUN_PORT_LINK_UP = 0x00
 FUN_PORT_LINK_UP_WITH_ERR = 0x01
 FUN_PORT_LINK_DOWN = 0x02
END

ENUM fun_port_led_type 
 FUN_PORT_LED_OFF = 0x00
 FUN_PORT_LED_AMBER = 0x01
 FUN_PORT_LED_GREEN = 0x02
 FUN_PORT_LED_BEACON = 0x03
END

/*
 *  PORT Request/Response
 */
ENUM fun_admin_port_subop
  FUN_ADMIN_PORT_SUBOP_DIAGS_WRITE = 0x20
  FUN_ADMIN_PORT_SUBOP_DIAGS_READ = 0x21
  FUN_ADMIN_PORT_SUBOP_XCVR_WRITE = 0x22
  FUN_ADMIN_PORT_SUBOP_XCVR_READ = 0x23
END

ENUM fun_admin_port_key
  FUN_ADMIN_PORT_KEY_ILLEGAL = 0x00
  FUN_ADMIN_PORT_KEY_MTU = 0x01
  FUN_ADMIN_PORT_KEY_FEC = 0x02
  FUN_ADMIN_PORT_KEY_SPEED = 0x03
  FUN_ADMIN_PORT_KEY_DEBOUNCE = 0x04
  FUN_ADMIN_PORT_KEY_DUPLEX = 0x05
  FUN_ADMIN_PORT_KEY_MACADDR = 0x06
  FUN_ADMIN_PORT_KEY_LINKMODE = 0x07
  FUN_ADMIN_PORT_KEY_BREAKOUT = 0x08
  FUN_ADMIN_PORT_KEY_ENABLE = 0x09
  FUN_ADMIN_PORT_KEY_DISABLE = 0x0a
  FUN_ADMIN_PORT_KEY_ERR_DISABLE = 0x0b
END

ENUM fun_admin_port_diags_key
  FUN_ADMIN_PORT_DIAGS_KEY_ILLEGAL = 0x00
  FUN_ADMIN_PORT_DIAGS_KEY_PRBS = 0x01
  FUN_ADMIN_PORT_DIAGS_KEY_LPBK = 0x02
END

ENUM fun_admin_port_xcvr_key
  FUN_ADMIN_PORT_XCVR_KEY_ILLEGAL = 0x00
  FUN_ADMIN_PORT_XCVR_KEY_EEPROM = 0x01
  FUN_ADMIN_PORT_XCVR_KEY_DOM = 0x02
END


STRUCT fun_admin_port_req
  0 63:00 fun_admin_req_common common
  1 63:00 ...
  UNION port_req_subop u
    STRUCT fun_admin_port_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: portid */
    END
    STRUCT fun_admin_port_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* portid to destroy */
    END      
    STRUCT fun_admin_port_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t startid /*  */
    END    
    STRUCT fun_admin_port_write_req write
      2 63:56  uint8_t subop /* SUBOP_WRITE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_write48_req write48[0]
    END
    STRUCT fun_admin_port_read_req read
      2 63:56  uint8_t subop /* SUBOP_READ */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_read48_req read48[0] 
    END
    STRUCT fun_admin_port_diags_write_req diags_write
      2 63:56  uint8_t subop /* SUBOP_DIAGS_WRITE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_write48_req write48[0]
    END
    STRUCT fun_admin_port_diags_read_req diags_read
      2 63:56  uint8_t subop /* SUBOP_DIAGS_READ */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_read48_req read48[0]
    END
    STRUCT fun_admin_port_xcvr_write_req xcvr_write
      2 63:56  uint8_t subop /* SUBOP_XCVR_WRITE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_write48_req write48[0]
    END
    STRUCT fun_admin_port_xcvr_read_req xcvr_read
      2 63:56  uint8_t subop /* SUBOP_XCVR_READ */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_read48_req read48[0]
   END
  END
END

STRUCT fun_admin_port_rsp
  0 63:00 fun_admin_rsp_common common
  1 63:00 ...
  UNION port_rsp_subop u
    STRUCT fun_admin_port_write_rsp write
      2 63:56  uint8_t subop /* SUBOP_WRITE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_write48_rsp write48[0]
    END
    STRUCT fun_admin_port_read_rsp read
      2 63:56  uint8_t subop /* SUBOP_READ */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_read48_rsp read48[0]
    END
    STRUCT fun_admin_port_diags_write_rsp diags_write
      2 63:56  uint8_t subop /* SUBOP_DIAGS_WRITE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_write48_rsp write48[0]
    END
    STRUCT fun_admin_port_diags_read_rsp diags_read
      2 63:56  uint8_t subop /* SUBOP_DIAGS_READ */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_read48_rsp read48[0]
    END
    STRUCT fun_admin_port_xcvr_write_rsp xcvr_write
      2 63:56  uint8_t subop /* SUBOP_XCVR_WRITE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_write48_rsp write48[0]
    END
    STRUCT fun_admin_port_xcvr_read_rsp xcvr_read
      2 63:56  uint8_t subop /* SUBOP_XCVR_READ */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* portid */
      _ _:_ fun_admin_read48_rsp read48[0]
    END
  END
END

/*
 *  VI Request/Response
 */
FLAGS fun_admin_vi_create_flag
  FUN_ADMIN_VI_CREATE_FLAG_ALLOCATOR = 0x01 /* Enable Virtual Interface allocator */
END

STRUCT fun_admin_vi_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION vi_req_subop u
    STRUCT fun_admin_vi_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_vi_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: viid */
    END
    STRUCT fun_admin_vi_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* viid to destroy */
    END 
    STRUCT fun_admin_vi_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t startid /*  */
    END   
  END
END

STRUCT fun_admin_vi_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION vi_rsp_subop u
    STRUCT fun_admin_vi_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* vi_rsp_common.rsp_common_status=0: viid, otherwise: N/A */
    END
    STRUCT fun_admin_vi_destroy_rsp destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* destroyed viid */
    END      
  END
END

/*
 *  ETH Request/Response
 */
FLAGS fun_admin_eth_create_flag
  FUN_ADMIN_ETH_CREATE_FLAG_ALLOCATOR = 0x01 /* Enable Ethernet allocator */
END

STRUCT fun_admin_eth_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION eth_req_subop u
    STRUCT fun_admin_eth_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_eth_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: ethid */
    END
    STRUCT fun_admin_eth_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* ethid to destroy */
    END      
    STRUCT fun_admin_eth_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t startid /*  */
    END   
  END
END

STRUCT fun_admin_eth_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION eth_rsp_subop u
    STRUCT fun_admin_eth_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* created ethid if eth_rsp_common.rsp_common_status = 0 or N/A */
    END
    STRUCT fun_admin_eth_destroy_rsp destroy
      2 63:56  uint8_t destroy_subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* destroyed ethid */
    END      
  END
END

/*
 *  SOCKET Request/Response
 */
FLAGS fun_admin_socket_create_flag
  FUN_ADMIN_SOCKET_CREATE_FLAG_ALLOCATOR = 0x01
END

STRUCT fun_admin_socket_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION socket_req_subop u
    STRUCT fun_admin_socket_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_socket_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: socketid */
    END
    STRUCT fun_admin_socket_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* socketid to destroy */
    END
    STRUCT fun_admin_socket_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t startid /*  */
    END       
  END
END

STRUCT fun_admin_socket_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION socket_admin_rsp_subop u
    STRUCT fun_admin_socket_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* socket_rsp_common.rsp_common_status=0: socketid, otherwise: N/A */
    END
    STRUCT fun_admin_socket_destroy_rsp destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* destroyed socketid */
    END      
  END
END

/*
 *  TCP Request/Response
 */
FLAGS fun_admin_tcp_create_flag
  FUN_ADMIN_TCP_CREATE_FLAG_ALLOCATOR = 0x01
END

STRUCT fun_admin_tcp_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION tcp_req_subop u
    STRUCT fun_admin_tcp_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_tcp_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: tcpid */
    END
    STRUCT fun_admin_tcp_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* tcpid to destroy */
    END
    STRUCT fun_admin_tcp_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t startid /*  */
    END       
  END
END

STRUCT fun_admin_tcp_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION tcp_admin_rsp_subop u
    STRUCT fun_tcp_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* tcp_rsp_common.rsp_common_status=0: tcpid, otherwise: N/A */
    END
    STRUCT fun_admin_tcp_destroy_rsp destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* destroyed tcpid */
    END      
  END
END

/*
 *  NSS Request/Response
 */
FLAGS fun_admin_nss_create_flag
  FUN_ADMIN_NSS_CREATE_FLAG_ALLOCATOR = 0x01 /* Enable NSS allocator */
END

STRUCT fun_admin_nss_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION nss_req_subop u
    STRUCT fun_admin_nss_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_nss_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: nssid */
    END
    STRUCT fun_admin_nss_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* nssid to destroy */
    END
    STRUCT fun_admin_nss_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_nss_create_flag enum */
      2 31:00 uint32_t startid /*  */
    END       
  END
END

STRUCT fun_admin_nss_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION nss_rsp_subop u
    STRUCT fun_admin_nss_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* nss_rsp_common.rsp_common_status=0: nssid, otherwise: N/A */
    END
    STRUCT fun_admin_nss_destroy_rsp destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* destroyed nssid */
    END      
  END
END

/*
 *  VOL Request/Response
 */
FLAGS fun_admin_vol_create_flag
  FUN_ADMIN_VOL_CREATE_FLAG_ALLOCATOR = 0x01 /* Enable Volume allocator */
END

STRUCT fun_admin_vol_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION vol_req_subop u
    STRUCT fun_admin_vol_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_vol_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: volid */
      3 63:00 uint64_t rsvd1
      4 63:00 uint64_t rsvd2
      5 63:00 uint64_t rsvd3
      6 63:00 uint64_t rsvd4
      7 63:00 uint64_t rsvd5
      8 63:00 uint64_t rsvd6
      9 63:00 uint64_t rsvd7
      10 63:00 uint64_t rsvd8
      11 63:00 uint64_t rsvd9
      12 63:00 uint64_t rsvd10
      13 63:00 uint64_t rsvd11
      14 63:00 uint64_t rsvd12
      15 63:00 uint64_t rsvd13
      16 63:00 uint64_t rsvd14
      17 63:00 uint64_t rsvd15
      18 63:00 uint64_t rsvd16
      19 63:00 uint64_t rsvd17
      20 63:00 uint64_t rsvd18
    END
    STRUCT fun_admin_vol_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* volid to destroy */
    END
    STRUCT fun_admin_vol_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t startid /*  */
    END       
  END
END

STRUCT fun_admin_vol_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION vol_rsp_subop u
    STRUCT fun_admin_vol_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* vol_rsp_common.rsp_common_status=0: volid, otherwise: N/A */
      3 63:00 uint64_t rsvd1
      4 63:00 uint64_t rsvd2
      5 63:00 uint64_t rsvd3
      6 63:00 uint64_t rsvd4
      7 63:00 uint64_t rsvd5
      8 63:00 uint64_t rsvd6
      9 63:00 uint64_t rsvd7
      10 63:00 uint64_t rsvd8
      11 63:00 uint64_t rsvd9
      12 63:00 uint64_t rsvd10
      13 63:00 uint64_t rsvd11
      14 63:00 uint64_t rsvd12
      15 63:00 uint64_t rsvd13
      16 63:00 uint64_t rsvd14
    END
    STRUCT fun_admin_vol_destroy_rsp destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* destroyed volid */
    END      
  END
END

/*
 *  CONCAT Request/Response
 */ 
FLAGS fun_admin_concat_create_flag
  FUN_ADMIN_CONCAT_CREATE_FLAG_ALLOCATOR = 0x01 /* Enable Volume allocator */
END

STRUCT fun_admin_concat_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION concat_req_subop u
    STRUCT fun_admin_concat_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_concat_create_flag enum */
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: concatid */
      3 63:00 uint64_t rsvd1
      4 63:00 uint64_t rsvd2
      5 63:00 uint64_t rsvd3
      6 63:00 uint64_t rsvd4
      7 63:00 uint64_t rsvd5
      8 63:00 uint64_t rsvd6
      9 63:00 uint64_t rsvd7
      10 63:00 uint64_t rsvd8
      11 63:00 uint64_t rsvd9
      12 63:00 uint64_t rsvd10
      13 63:00 uint64_t rsvd11
      14 63:00 uint64_t rsvd12
      15 63:00 uint64_t rsvd13
      16 63:00 uint64_t rsvd14
    END
    STRUCT fun_admin_concat_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* concatid to destroy */
    END
    STRUCT fun_admin_concat_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t startid /*  */
    END       
  END
END

STRUCT fun_admin_concat_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION concat_rsp_subop u
    STRUCT fun_admin_concat_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* concat_rsp_common.rsp_common_status=0: concatid, otherwise: N/A */
      3 63:00 uint64_t rsvd1
      4 63:00 uint64_t rsvd2
      5 63:00 uint64_t rsvd3
      6 63:00 uint64_t rsvd4
      7 63:00 uint64_t rsvd5
      8 63:00 uint64_t rsvd6
      9 63:00 uint64_t rsvd7
      10 63:00 uint64_t rsvd8
      11 63:00 uint64_t rsvd9
      12 63:00 uint64_t rsvd10
      13 63:00 uint64_t rsvd11
      14 63:00 uint64_t rsvd12
      15 63:00 uint64_t rsvd13
      16 63:00 uint64_t rsvd14
    END
    STRUCT fun_admin_concat_destroy_rsp destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* destroyed concatid */
    END      
  END
END


/*
 *  CONCAT Request/Response
 */ 
FLAGS fun_admin_crypto_create_flag
  FUN_ADMIN_CRYPTO_CREATE_FLAG_ALLOCATOR = 0x01 /* Enable Crypto allocator */
END

STRUCT fun_admin_crypto_req
  0 63:00 fun_admin_req_common common 
  1 63:00 ...
  UNION crypto_req_subop u
    STRUCT fun_admin_crypto_create_req create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: cryptoid */
      3 63:00 uint64_t rsvd1
      4 63:00 uint64_t rsvd2
      5 63:00 uint64_t rsvd3
      6 63:00 uint64_t rsvd4
      7 63:00 uint64_t rsvd5
      8 63:00 uint64_t rsvd6
    END
    STRUCT fun_admin_crypto_destroy_req destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags
      2 31:00 uint32_t id /* cryptoid to destroy */
    END      
    STRUCT fun_admin_crypto_list_req list
      2 63:56  uint8_t subop /* SUBOP_LIST */
      2 55:48  uint8_t rsvd0
      2 47:32 uint16_t flags /* see fun_admin_crypto_create_flag enum */
      2 31:00 uint32_t startid /*  */
    END    
  END
END

STRUCT fun_admin_crypto_rsp
  0 63:00 fun_admin_rsp_common common
  0 63:00 ...
  UNION crypto_rsp_subop u
    STRUCT fun_admin_crypto_create_rsp create
      2 63:56  uint8_t subop /* SUBOP_CREATE */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* crypto_rsp_common.rsp_common_status=0: cryptoid, otherwise: N/A */
      3 63:00 uint64_t rsvd1
      4 63:00 uint64_t rsvd2
      5 63:00 uint64_t rsvd3
      6 63:00 uint64_t rsvd4
      7 63:00 uint64_t rsvd5
      8 63:00 uint64_t rsvd6
    END
    STRUCT fun_admin_crypto_destroy_rsp destroy
      2 63:56  uint8_t subop /* SUBOP_DESTROY */
      2 55:32  uint8_t rsvd0[3]
      2 31:00 uint32_t id /* destroyed cryptoid */
    END
  END
END

/*
 *  D a t a p a t h   R e q u e s t s   and   R e s p o n s e s
 */
STRUCT fun_req_common
  0 63:56  uint8_t op
  0 55:48  uint8_t len8 /* length of the request in units of 8-bytes */
  0 47:32 uint16_t flags
  0 31:00 uint32_t rsvd0 // maybe turn this into 16-bit cid and dump cookie? or cookie can be used for host as timestamp field to figure out how long an io took
  1 63:00 uint64_t cookie /* caller cookie, returned in response */
END 

STRUCT fun_rsp_common
  0 63:56  uint8_t op /* see fun_admin_op enum, copied from request */
  0 55:08  uint8_t rsvd0[6]
  0 07:00  uint8_t ret
  1 63:00 uint64_t cookie  /* caller cookie, copied from request */
END 

// at the end of CQE, if rsp is small enough, we can place it in the rqe itself, otherise into next rq buf
struct fun_cqe_info_xxx {

  0 63:32 uint32_t rqbuf_offset /* offset into rqbuf, to support coalescing */
  0 31:00 uint32_t rsvd0
  1 63:32 uint32_t sqid /* associated submission queue */ 
  1 31:16 uint16_t sqhd /* sq head pointer value */
  1 15:08  uint8_t cid /* command identifier */
  1 07:02  uint8_t rsvd1
  1 01:01  uint8_t rqbuf_written /* rq buffer was written */
  1 00:00  uint8_t phase /* phase bit, 0 or 1*/
};

ENUM fun_eprq_op
  FUN_EPRQ_OP_ILLEGAL = 0x00
  FUN_EPRQ_OP_RQBUFS = 0x01
END

STRUCT fun_eprq_rqbuf
  0 63:08 uint64_t bufaddr     /* buffer (DMA) address */
  0 07:00 uint64_t bufsize2K   /* buffer size in units of 2-Kbytes or driver could program a buf size table and this is index into the table */
END

STRUCT fun_eprq_rqbufs_req
  0 63:0 fun_req_common common // we could consider removing the req_common to have more rqbufs in the request?
  1 63:0 ...
  _ _:_ fun_eprq_rqbuf rqbuf[0]
END 

STRUCT fun_eprq_rqbufs_rsp
  0 63:0 fun_rsp_common common
  1 63:0 ...
END

ENUM fun_eth_op
  FUN_ETH_OP_ILLEGAL = 0x00
  FUN_ETH_OP_TX = 0x01
  FUN_ETH_OP_RX = 0x02
END

STRUCT fun_subop_imm
  0 63:56  uint8_t subop  /* see fun_data_subop enum */
  0 55:48  uint8_t flags
  0 47:32 uint16_t rsvd
  0 31:00 uint32_t len
  _ _:_ uint8_t data[0]
END

STRUCT fun_subop_sgl
  0 63:56  uint8_t subop  /* see fun_data_subop enum */
  0 55:48  uint8_t flags
  0 47:40  uint8_t nsgl
  0 39:32  uint8_t rsvd0
  0 31:00 uint32_t sgl_len
  1 63:00 uint64_t sgl_data
END

STRUCT fun_eth_tx_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48  uint16_t rsvd0
  2 47:32 uint16_t flag /* see fun_eth_flag enum */
  2 31:00 uint32_t id /* ethid */
  3 63:32 uint32_t pktlen
  3 31:00 uint32_t rsvd1
  4 63:00 uint64_t metadata[8] // modelel after what NU generates
  5 63:00 ...
  6 63:00 ...
  7 63:00 ...
  8 63:00 ...
  9 63:00 ...
  10 63:00 ...
  11 63:00 ...
  _ _:_ fun_subop_imm imm[0] // must contain ethernet header, offsetted by 2-bytes, can be followed by sgl for payload of packet
END

ENUM fun_data_op
  FUN_DATAOP_ILLEGAL = 0x00
  FUN_DATAOP_IMM = 0x01     /* immediate data */
  FUN_DATAOP_SGL = 0x02     /* scatter-gather */
END

// F1 to Host
STRUCT fun_eth_rx_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48  uint16_t rsvd0
  2 47:32 uint16_t flag /* see fun_eth_flag enum */
  2 31:00 uint32_t id /* ethid */
  3 63:32 uint32_t pktlen
  3 31:00 uint32_t rsvd1
  4 63:00 uint64_t metadata[8] // modelel after what NU generates
  5 63:00 ...
  6 63:00 ...
  7 63:00 ...
  8 63:00 ...
  9 63:00 ...
  10 63:00 ...
  11 63:00 ...
  _ _:_ fun_subop_imm imm[0] // actual packet, offsetted by 2-bytes  
END

ENUM fun_socket_op
  FUN_SOCKET_OP_ILLEGAL = 0x00
  FUN_SOCKET_OP_OPEN = 0x01
  FUN_SOCKET_OP_CLOSE = 0x02
  FUN_SOCKET_OP_SHUTDOWN = 0x03
  FUN_SOCKET_OP_ABORT = 0x04
  FUN_SOCKET_OP_BIND = 0x05
  FUN_SOCKET_OP_LISTEN = 0x06
  FUN_SOCKET_OP_ACCEPT = 0x07
  FUN_SOCKET_OP_CONNECT = 0x08
  FUN_SOCKET_OP_SENDMSG = 0x09
  FUN_SOCKET_OP_RECVMSG = 0x0A
END

ENUM fun_socket_domain
  FUN_SOCKET_DOMAIN_INET = 0x02
  FUN_SOCKET_DOMAIN_INET6 = 0x0a
END

ENUM fun_socket_type
  FUN_SOCKET_TYPE_DGRAM = 0x01
  FUN_SOCKET_TYPE_STREAM = 0x02
  FUN_SOCKET_TYPE_RAW = 0x03
  FUN_SOCKET_TYPE_SEQPACKET = 0x05
END

ENUM fun_socket_protocol
  FUN_SOCKET_PROTOCOL_TCP = 0x06
END

STRUCT fun_socket_open_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48  uint16_t rsvd0
  2 47:32 uint16_t flags 
  2 31:00 uint32_t id /* FLAG_ALLOCATOR=0: n/a, FLAG_ALLOCATOR=1: socketid */
  3 63:32  int32_t domain
  3 31:00  int32_t type
  4 63:32  int32_t protocol
  4 31:00 uint32_t rsvd
END

STRUCT fun_socket_close_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
END

STRUCT fun_socket_shutdown_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
  3 63:32  int32_t how
  3 31:00 uint32_t rsvd1
END

STRUCT fun_socket_abort_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
END

STRUCT fun_socket_bind_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
END

STRUCT fun_socket_listen_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
  3 63:32  int32_t backlog
  3 31:00 uint32_t rsvd1
END

STRUCT fun_socket_accept_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
END

STRUCT fun_socket_connect_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
END

STRUCT fun_socket_sendmsg_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
END

STRUCT fun_socket_recvmsg_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:32 uint16_t flags
  2 31:00 uint32_t id
END

STRUCT fun_cqe_info
  0 63:48 uint16_t sqhd /* sq head pointer value */
  0 47:32 uint16_t sqid /* associated submission queue identifier or 0xffff */
  0 31:16 uint16_t cid  /* command identifier */
  0 15:00 uint16_t sf_p /* status field and phase-bit */
END

STRUCT fun_cqe_16
  0 63:0  uint64_t value[1]
  1 63:48 uint16_t sqhd /* sq head pointer value */
  1 47:32 uint16_t sqid /* associated submission queue identifier or 0xffff */
  1 31:16 uint16_t cid  /* command identifier */
  1 15:00 uint16_t sf_p /* status field and phase-bit */
END

// FFE

ENUM fun_nu_ffe_table_t
  FUN_NU_TBL_TEMPLATE_TCAM_KEY = 0x00
  FUN_NU_TBL_TEMPLATE_TCAM_MASK = 0x01
  FUN_NU_TBL_KEY_UCODE_MEM = 0x02
  FUN_NU_TBL_ACT_UCODE_MEM = 0x03
  FUN_NU_TBL_ACT_DMEM_L1 = 0x04
  FUN_NU_TBL_ACT_DMEM_S1 = 0x05
  FUN_NU_TBL_ACT_DMEM_L2 = 0x06
  FUN_NU_TBL_ACT_DMEM_S2 = 0x07
  FUN_NU_TBL_HASH_MEM = 0x08
  FUN_NU_TBL_STASH_TABLE = 0x09
  FUN_NU_TBL_LG_TCAM = 0x0a
  FUN_NU_TBL_SM_TCAM = 0x0b
  FUN_NU_TBL_DIT_MEM_S1 = 0x0c
  FUN_NU_TBL_DIT_MEM_S2 = 0x0d
END

ENUM ffe_stg_t
  FUN_NU_FFE_STG0 = 0x00
  FUN_NU_FFE_STG1 = 0x01
  FUN_NU_FFE_STG2 = 0x02
  FUN_NU_FFE_STG3 = 0x03
  FUN_NU_FFE_STG4 = 0x04
  FUN_NU_FFE_STG5 = 0x05
END

ENUM ffe_bank_t
  FUN_NU_FFE_BANK0 = 0x00
  FUN_NU_FFE_BANK1 = 0x01
  FUN_NU_FFE_BANK2 = 0x02
  FUN_NU_FFE_BANK3 = 0x03
  FUN_NU_FFE_BANK4 = 0x04
  FUN_NU_FFE_BANK5 = 0x05
  FUN_NU_FFE_BANK6 = 0x06
  FUN_NU_FFE_BANK7 = 0x07
END

ENUM fun_nu_op
  FUN_NU_OP_FFE_TMP_TCAM_R = 0		/* FFE begin */
  FUN_NU_OP_FFE_TMP_TCAM_W = 1
  FUN_NU_OP_FFE_TCAM_R = 2
  FUN_NU_OP_FFE_TCAM_W = 3
  FUN_NU_OP_FFE_TCAM_INV = 4
  FUN_NU_OP_FFE_STASH_R = 5
  FUN_NU_OP_FFE_STASH_W = 6
  FUN_NU_OP_FFE_STASH_INV = 7
  FUN_NU_OP_FFE_HASH_R = 8
  FUN_NU_OP_FFE_HASH_W = 9
  FUN_NU_OP_FFE_HASH_INV = 10
  FUN_NU_OP_FFE_DIT_R = 11
  FUN_NU_OP_FFE_DIT_W = 12
  FUN_NU_OP_FFE_ACT_UCODE_R = 13
  FUN_NU_OP_FFE_ACT_UCODE_W = 14
  FUN_NU_OP_FFE_ACT_DMEM_R = 15
  FUN_NU_OP_FFE_ACT_DMEM_W = 16
  FUN_NU_OP_NH_W = 17
  FUN_NU_OP_RW_DATA_W = 18
  FUN_NU_OP_RW_INSTR_W = 19
  FUN_NU_OP_RW_PROF_TCAM_W = 20
  FUN_NU_OP_SSE_MD_W = 21
  FUN_NU_OP_NH_OFF_MAP_W = 22
END

// FFE Template TCAM entry format
STRUCT fun_nu_ffe_entry_tmp_tcam
  0 63:48 uint16_t index
  0 47:32 uint16_t rsvd0
  0 31:26 uint32_t rsvd1
  0 25:0 uint32_t key /* key (26 bits) */
  1 63:32 uint32_t rsvd2
  1 31:26 uint32_t rsvd3
  1 25:0 uint32_t mask /* mask (26 bits) */
  2 63:0 uint8_t kuc[48] /* key microcode */
  3 63:0 ...
  4 63:0 ...
  5 63:0 ...
  6 63:0 ...
  7 63:0 ...
  8 63:0 uint64_t rsvd1[2]
  9 63:0 ...
END

// FFE TCAM entry format
STRUCT fun_nu_ffe_entry_tcam
  0 63:48 uint16_t index
  0 47:40 uint8_t rsvd0
  0 39:32 uint8_t bank
  0 31:22 uint16_t rsvd1
  0 21:16 uint16_t ucode_ix
  0 15:10 uint16_t rsvd2
  0 09:00 uint16_t dmem_ix
  1 63:00 uint8_t key[25]
  2 63:00 ...
  3 63:00 ...
  4 63:56 ...
  4 55:00 uint8_t rsvd1[7]
  5 63:00 uint8_t mask[25]
  6 63:00 ...
  7 63:00 ...
  8 63:56 ...
  8 55:00 uint8_t rsvd2[7]
END

// FFE Hash or Stash entry format
STRUCT fun_nu_ffe_entry_hash_stash
  0 63:48 uint16_t index
  0 47:40 uint8_t rsvd0
  0 39:32 uint8_t bank
  0 31:31 uint8_t valid
  0 30:24 uint8_t rsvd0
  0 23:0 uint8_t rsvd1[3]
  1 63:24 uint8_t rsvd2[5]
  1 23:00 uint8_t key[11]
  2 63:00 ...
  3 63:32 uint32_t rsvd3
  3 31:22 uint16_t rsvd4
  3 21:16 uint16_t ucode_ix
  3 15:10 uint16_t rsvd5
  3 09:00 uint16_t dmem_ix
END

// FFE DIT entry format
STRUCT fun_nu_ffe_entry_dit
  0 63:48 uint16_t index
  0 47:32 uint16_t rsvd0
  0 31:22 uint16_t rsvd1
  0 21:16 uint16_t ucode_ix
  0 15:10 uint16_t rsvd2
  0 09:00 uint16_t dmem_ix
END

// FFE action microcode entry format
STRUCT fun_nu_ffe_entry_act_ucode
  0 63:48 uint16_t index
  0 47:0 uint8_t rsvd0[6]
  1 63:0 uint8_t instr_data_wlst[26]
  2 63:0 ...
  3 63:0 ...
  4 63:48 ...
  4 47:0 uint8_t rsvd1[38]
  5 63:0 ...
  6 63:0 ...
  7 63:0 ...
  8 63:0 ...
END

// FFE action dmem entry format
STRUCT fun_nu_ffe_entry_act_dmem
  0 63:48 uint16_t index
  0 47:0 uint8_t rsvd0[6]
  1 63:00 uint8_t data[8] /* action data memory */
END


// The FFE commands are followed by either a fun_subcmd_immediate or fun_subcmd_sgl
// containing immediate or sgl information respectively. The data will be of the
// type of the command (e.g. if it is a fun_nu_ffe_tmp_tcam op, the data will be of
// type fun_nu_ffe_entry_tmp_tcam).
// Description to be expanded further.

// Command interface for writing/reading the various tables available in the FFE.
STRUCT fun_nu_ffe_tmp_tcam_rw_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:16 uint8_t rsvd1[3]
  2 15:0 uint16_t data_size /* key microcode size */
END

STRUCT fun_nu_ffe_tmp_tcam_rw_rsp
  0 63:0 fun_rsp_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:16 uint8_t rsvd1[3]
  2 15:0 uint16_t data_size /* key microcode size */
END

// Header to refer to an FFE TCAM
STRUCT fun_nu_ffe_tcam_rwi_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:32 uint8_t rsvd1
  2 31:16 uint16_t table
  2 15:0 uint16_t key_size
END

STRUCT fun_nu_ffe_tcam_rwi_rsp
  0 63:0 fun_rsp_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:32 uint8_t rsvd1
  2 31:16 uint16_t table
  2 15:0 uint16_t key_size
END

// Header to refer to an FFE Hash or Stash
STRUCT fun_nu_ffe_hash_stash_rwi_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:32 uint8_t rsvd1
  2 31:16 uint16_t table
  2 15:0 uint16_t key_size
END

STRUCT fun_nu_ffe_hash_stash_rwi_rsp
  0 63:0 fun_rsp_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:32 uint8_t rsvd1
  2 31:16 uint16_t table
  2 15:0 uint16_t key_size
END

// Header to refer to an FFE Direct Index Table
STRUCT fun_nu_ffe_dit_rw_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:32 uint8_t rsvd1
  2 31:16 uint16_t table
  2 15:0 uint16_t rsvd2
END

STRUCT fun_nu_ffe_dit_rw_rsp
  0 63:0 fun_rsp_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:32 uint8_t rsvd1
  2 31:16 uint16_t table
  2 15:0 uint16_t rsvd2
END

// Header to refer to an FFE Action Microcode Table
STRUCT fun_nu_ffe_act_ucode_rw_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:0 uint8_t rsvd1[5]
END

STRUCT fun_nu_ffe_act_ucode_rw_rsp
  0 63:0 fun_rsp_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:0 uint8_t rsvd1[5]
END

// Header to refer to an FFE Action DMEM Table
STRUCT fun_nu_ffe_act_dmem_rw_req
  0 63:0 fun_req_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:32 uint8_t rsvd1
  2 31:16 uint16_t table
  2 15:0 uint16_t rsvd2
END

STRUCT fun_nu_ffe_act_dmem_rw_rsp
  0 63:0 fun_rsp_common common
  1 63:0 ...
  2 63:48 uint16_t rsvd0
  2 47:40 uint8_t stage
  2 39:32 uint8_t rsvd1
  2 31:16 uint16_t table
  2 15:0 uint16_t rsvd2
END

STRUCT fun_nu_nh_entry
  0 63:60 uint8_t level
  0 59:56 uint8_t type
  0 55:32 uint8_t rsvd0[3]
  0 31:16 uint16_t index
  0 15:0 uint16_t len
  _ _:_ uint8_t data[0]
END

ENUM fun_nu_nh_lvl_t
  FUN_NU_NH_LVL0 = 0
  FUN_NU_NH_LVL1 = 1
  FUN_NU_NH_LVL2 = 2
END

ENUM fun_nu_nh_type_t
  FUN_NU_NH_TYPE_FINAL = 0
  FUN_NU_NH_TYPE_INDIRECT = 1
  FUN_NU_NH_TYPE_WECMP = 2
  FUN_NU_NH_TYPE_ECMP = 3
  FUN_NU_NH_TYPE_LFA = 4
  FUN_NU_NH_TYPE_WECMP_LOC = 5
END

// Next Hop write: Followed by a sequence of fun_nu_nh_entry structs
STRUCT fun_nu_nh_w_req
  0 63:0 fun_req_common common
  1 63:0 ...
END

STRUCT fun_nu_nh_w_rsp
  0 63:0 fun_rsp_common common
  1 63:0 ...
END


STRUCT fun_nu_prw_data_entry
  0 63:60 uint16_t rsvd0
  0 59:48 uint16_t index
  0 47:00 uint8_t rsvd1[6]
  1 63:00 uint8_t data[8]
  2 63:00 uint64_t rsvd2
END

STRUCT fun_nu_prw_instr_entry
  0 63:60 uint16_t rsvd0
  0 59:48 uint16_t index
  0 47:00 uint8_t rsvd1[6]
  1 63:00 uint8_t data[19]
  2 63:00 ...
  3 63:40 ...
  3 39:00 uint8_t rsvd2[5]
END

STRUCT fun_nu_rw_prof_tcam_entry
  0 63:60 uint16_t rsvd0
  0 59:48 uint16_t index
  0 47:36 uint16_t rsvd1
  0 35:32 uint16_t offset
  0 31:00 uint32_t rsvd2
  1 63:56 uint32_t rsvd3
  1 55:32 uint32_t key
  1 31:24 uint32_t rsvd4
  1 23:0 uint32_t mask
END


STRUCT fun_nu_nh_off_map_entry
  0 63:56 uint8_t rsvd0
  0 55:52 uint8_t rsvd1
  0 51:48 uint8_t index
  0 47:42 uint8_t rsvd2
  0 41:40 uint8_t offset
  0 39:34 uint8_t rsvd3
  0 33:32 uint8_t strm_type
  0 31:00 uint32_t rsvd4
END

STRUCT fun_nu_nh_off_req
  0 63:00 fun_req_common common /* op: FUN_NU_OP_NH_OFF_MAP_W */
  1 63:00 ...
  _ _:_ fun_nu_nh_off_map_entry entry[0]
END


FLAGS fun_nu_other_flags
  FUN_NU_RW_NH_OTHER_FLAG_ERP = 0x01
END

FLAGS fun_nu_fpg_flags
  FUN_NU_RW_NH_FPG_FLAG_FPG0 = 0x01
  FUN_NU_RW_NH_FPG_FLAG_FPG1 = 0x02
  FUN_NU_RW_NH_FPG_FLAG_FPG2 = 0x04
  FUN_NU_RW_NH_FPG_FLAG_FPG3 = 0x08
  FUN_NU_RW_NH_FPG_FLAG_FPG4 = 0x10
  FUN_NU_RW_NH_FPG_FLAG_FPG5 = 0x20
END

STRUCT fun_nu_prw_w_data_req
  0 63:0 fun_req_common common /* op: FUN_NU_OP_RW_DATA_W */
  1 63:0 ...
  2 63:49 uint16_t rsvd0
  2 48:48 uint16_t map_other /* see fun_nu_other_flags */
  2 47:46 uint8_t rsvd1
  2 45:40 uint8_t map_fpg /* see fun_nu_fpg_flags */
  2 39:00 uint8_t rsvd0[5]
  _ _:_ fun_nu_prw_data_entry entry[0]
END

STRUCT fun_nu_prw_w_data_rsp
  0 63:0 fun_rsp_common common /* op: FUN_NU_OP_RW_DATA_W */
  1 63:0 ...
  2 63:49 uint16_t rsvd0
  2 48:48 uint16_t map_other /* see fun_nu_other_flags */
  2 47:46 uint8_t rsvd1
  2 45:40 uint8_t map_fpg /* see fun_nu_fpg_flags */
  2 39:00 uint8_t rsvd0[5]
  _ _:_ fun_nu_prw_data_entry entry[0]
END

STRUCT fun_nu_prw_w_instr_req
  0 63:0 fun_req_common common /* op: FUN_NU_OP_RW_INSTR_W */
  1 63:0 ...
  _ _:_ fun_nu_prw_instr_entry entry[0]
END

STRUCT fun_nu_prw_w_instr_rsp
  0 63:0 fun_rsp_common common /* op: FUN_NU_OP_RW_INSTR_W */
  1 63:0 ...
  _ _:_ fun_nu_prw_instr_entry entry[0]
END

STRUCT fun_nu_prw_prof_tcam_req
  0 63:0 fun_req_common common /* op: FUN_NU_OP_RW_PROF_TCAM_W */
  1 63:0 ...
  _ _:_ fun_nu_rw_prof_tcam_entry entry[0]
END

STRUCT fun_nu_prw_prof_tcam_rsp
  0 63:0 fun_rsp_common common /* op: FUN_NU_OP_RW_PROF_TCAM_W */
  1 63:0 ...
  _ _:_ fun_nu_rw_prof_tcam_entry entry[0]
END

STRUCT fun_nu_sse_md_entry
  0 63:08 uint8_t rsvd0[7]
  0 07:00 uint8_t stream
  1 63:00 uint64_t data[6]
  2 63:00 ...
  3 63:00 ...
  4 63:00 ...
  5 63:00 ...
  6 63:00 ...
END

STRUCT fun_nu_sse_md_w_req
  0 63:00 fun_req_common common
  1 63:00 ...
  _ _:_ fun_nu_sse_md_entry mdata[0]
END

STRUCT fun_nu_sse_md_w_rsp
  0 63:00 fun_rsp_common common
  1 63:00 ...
  _ _:_ fun_nu_sse_md_entry mdata[0]
END


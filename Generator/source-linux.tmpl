{% macro structDecl(struct) %}
/* Dump out {{struct.Tag()}} {{struct.name}} as a hex string.
 * Hex is encoded in big-endian order.
 * file_des: file descriptor to write output to.
 * s: pointer to {{struct.Tag()}} {{struct.name}} to dump.
 */
void {{struct.name}}_dump(FILE *file_des, {{struct.DeclarationString()}} *s) {
  {# If the struct is a union and the first thing in the union is a struct
     and the first thing in that struct has a default value, then we're
     probably looking at a union with a field for decoding as first byte
     that we can dump.  Dump stuff. #}

  {% if struct.is_union %}
    {% if struct.fields and struct.fields[0].type.IsRecord() and struct.fields[0].type.base_type.node.fields[0].fixed_value %}
      switch ((({{struct.fields[0].type.ParameterTypeName()}}*)s)->{{struct.fields[0].type.base_type.node.fields[0].name}}) {
      {% for field in struct.fields %}
        case {% if field.type.base_type.node.fields[0].fixed_value %} {{field.type.base_type.node.fields[0].fixed_value}} {% else %} /* PUT COMMENT IN {{struct.name}}.{{field.name}}.{{field.type.base_type.node.fields[0].name}} FOR VALUE */ {% endif %}:
          {{field.type.TypeName()}}_dump(file_des, &(s->{{field.name}}));
	  /* Pad out zeroes to the size of union. */
	  for (int i=0;
               i < (sizeof({{struct.DeclarationString()}}) - sizeof(s->{{field.name}}));
	        i++) {
              fprintf(file_des, ", 0x0");
          }
          break;
      {% endfor %}
      default:
         /* assert(1==0); */
         break;
      }
    {% else %}
    /* No support for unions that don't have a variable naming which
       enum they are. */
    assert(1==0);
    {% endif %}
  {% else %}
    {% for field in struct.fields %}
      {% if not loop.first %}
        fprintf(file_des, ", ");
      {% endif %}
      {% if field.is_reserved %}
        {% if field.type.IsArray() %}
	  {% if field.type.ArraySize() == 0 %}
	    assert(1==0); /* no support for array of size 0. */
	  {% else %}
  	    for (int i=0; i < {{field.type.ArraySize()}}; i++) {
              dump_hex_{{field.type.base_type.BitWidth()}}(file_des, -1); /* {{field.name}} */
            }
          {% endif %}
	{% else %}
          dump_hex_{{field.type.BitWidth()}}(file_des, -1); /* {{field.name}} */
	{% endif %}
      {% else %}
	{% if field.type.IsArray() %}
	  {% if field.type.ArraySize() == 0 %}
	    assert(1==0); /* no support for array of size 0. */
	  {% else %}
	    {% if field.type.ArraySize() == 0 %}
	      {% if field.type.IsRecord() %}
	        for (int i=0; i < {{field.type.ArraySize()}}; i++) {
  	          {{field.type.base_type.Name()}}_dump(
			  file_des, &(s->{{field.name}}[i]));
                }
              {% else %}
	        dump_hex_{{field.type.BitWidth()}}(file_des, s->{{field.name}}[i]);
              {% endif %}
            {% endif %}
          {% endif %}
        {% else %}
          {% if field.type.IsRecord() %}
 	       {{field.type.base_type.Name()}}_dump(
                          file_des, &(s->{{field.name}}));
          {% else %}
	     dump_hex_{{field.type.BitWidth()}}(file_des, s->{{field.name}});
          {% endif %}
        {% endif %}
      {% endif %}
    {% endfor %}
  {% endif %}
}


{% endmacro %}
// Source created by generator.py.
// Do not change this file; change the gen file "{{gen_file}}" instead.
#ifndef __KERNEL__

#include <assert.h>
#include <stdint.h>
#include <stdio.h>

#include "{{output_base}}.h"

{% if generate_dump %}

/* Dump out a memory range in hex values.
 * ptr is a pointer to the beginning of the memory.
 * len is the number of bytes to write.
 * bytes are dumped out in order.
 */
static void dump_hex_8(FILE *file_des, uint8_t value) {
       fprintf(file_des, "0x%0x", value);
}

static void dump_hex_16(FILE *file_des, uint16_t value) {
       uint16_t be_value = cpu_to_dpu16(value);
       uint8_t *buf = (uint8_t *) &be_value;

       for (int i=0; i < 2; i++) {
               if (i != 0) fprintf(file_des, ", ");
               fprintf(file_des, "0x%0x", (uint8_t) buf[i]);
       }
}

static void dump_hex_32(FILE *file_des, uint32_t value) {
       uint32_t be_value = cpu_to_dpu32(value);
       uint8_t *buf = (uint8_t *) &be_value;

       for (int i=0; i < 4; i++) {
              if (i != 0) fprintf(file_des, ", ");
              fprintf(file_des, "0x%0x", (uint8_t) buf[i]);
       }
}

static void dump_hex_64(FILE *file_des, uint64_t value) {
       uint64_t be_value = cpu_to_dpu64(value);
       uint8_t *buf = (uint8_t *) &be_value;

       for (int i=0; i < 8; i++) {
       	       if (i != 0) fprintf(file_des, ", ");
	       fprintf(file_des, "0x%0x", (uint8_t) buf[i]);
       }
}

{% for decl in declarations %}
  {% if decl.is_struct %}   
    {{ structDecl(decl) }}
  {% endif %}
{% endfor %}
{% endif %}

#endif // __KERNEL__

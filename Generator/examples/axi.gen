// Description of data structures for AXI interface between
// the MIPS L2 cache and Fungible's Coherence Adapter.
//
// Taken from CM3_CMBIU_ACE_May 4 2016-2.pdf
//
// Robert Bowdidge, August 17, 2016
// Copyright 2016 Fungible Inc. All Rights Reserved.
//

STRUCT AXIReadRequest
// Indicates there is a valid read/write present on the Ax* channel.
// The request is transferred if both axValid and axReady are asserted.
0 0:0 uint32_t c_mem_axValid
// Indicates that the slave can accept a read/write request.
0 1:1 uint32_t c_mem_axReady
// Indicates the id of the read or write request.
// Equal to the sdb number plus zero msb for all accesses except UC.
// UC uses fixed value of b1_1111.
0 2:6 uint32_t c_mem_axId // Address ID
0 7:8 uint32_t c_mem_axAddr // Address of the request.
0 9:16 uint32_t c_mem_axLen // Number of data beats - 1.
0 17:19 uint32_t c_mem_axSize // Log 2 of burst size of number of bytes per beat.
0 20:21 uint32_t c_mem_axBurst // Type of burst.  Should always be 01 ("incr")
// Used to indicate exclusive access request from a CohUpgradeSC command,
// converted to a CleanUnique.
0 22:22 uint32_t c_mem_axLock // Output.
0 23:26 uint32_t c_em_axCache // Constructed from req_cca and req_cmd.
0 27:29 uint32_t c_mem_axProt // Unused but required AXI feature.  Default = 0b010.
0 30:33 uint32_t c_mem_axQos // bit 0 = req_pri, 1-3 = 0.
// 20:13 up to 8 IOCU user bits.
// 12:9 source ID.
// 8:7 VP id
// 6:2 guest id
// 1: code vs data
// 0: prefetch.
0 34:64 uint32_t c_mem_axUser
END

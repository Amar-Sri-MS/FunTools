{# 

Standard Fungible template for source code for generated structures.

#}
// Source file created by generator.py
// Do not change this file;
// change the gen file {{gen_file}} instead.

#ifdef __KERNEL__
/* For Linux kernel */
#define assert(x)

#include <linux/types.h>

#else

/* For FunOS and CC-Linux. */
#include <assert.h>
#include <stdint.h>

#endif // __KERNEL__

#include "{{output_base}}.h"

{% for enum in enums %}
const char *{{enum.name | as_lower}}_names[] = {
      {% for i in range(0, enum.last_value + 1) %}
      "{{enum.NameForValue(i)}}",  /* {{i|as_hex}} */
      {% endfor %}
};

{% endfor %}

{% for flagset in flagsets %}
const char *{{flagset.name | as_lower }}_names[] = {
  {% for var in flagset.VariablesWithNames() %}
    "{{var.name}}", /* {{var.value | as_hex}} */
  {% endfor %}
};

{% endfor %}

{% for struct in structs %}
/* Initializes the {{struct.name}} structure.
 *
 *  Arguments: 
  {% for field in struct.arg_fields() %}
 * {{field.name}}: {% if field.key_comment %}{{field.key_comment}}{% endif %}

  {% endfor %}
 */
void {{struct.name}}_init(struct {{struct.init_struct().name}} *s{%if struct.arg_fields() %}, 
{% for field in struct.arg_fields() %}
  {{field | as_declaration }} {{ ", " if not loop.last }} {% endfor %}{% endif %}) {

  {% for field in struct.arg_fields() %} 
  {# TODO(bowdidge): Only do assert if field isn't natural size. #}
  {% if not field.is_natural_width %}
  assert({{field.name}} <= {{field.max_value|as_hex}});
  {% endif %}
  {% endfor %}

  {% for field in struct.init_fields() %}
    {% if field.packed_fields %}
      s->{{field.init_accessor()}}{{field.name}} = 
      {% for f in field.fields_to_set() %}
	{{f.parent_struct.name|as_macro}}_{{f.name|as_macro}}_P({{f.name}}) {{" | " if not loop.last }}
      {% endfor %}
	;
    {% else %}
      s->{{field.init_accessor()}}{{field.name}} = {{field.name}};
    {% endif %}
  {% endfor %}
}

{% if generate_json %}
/*
 * Initializes {{struct.name}} structure from JSON representation.
 * Returns false if initialization failed.
 * Caller responsible for determining correct init function(s).
 */
extern bool {{struct.name}}_json_init(struct fun_json *j,
    struct {{struct.init_struct().name}} *s) {
{% for field in struct.arg_fields() %}
  struct fun_json *{{field.name}}_j = fun_json_lookup(j, "{{field.name}}");
  if ({{field.name}}_j == NULL) {
     return false;
  }
  {{field | as_declaration}} = {{field.name}}_j->int_value;
{% endfor %}

  {{struct.name}}_init(s  {% if struct.arg_fields() %},
    {% for field in struct.arg_fields() %}{{field.name}}
      {{", " if not loop.last}}
         {% endfor %}
  {% endif %});
  return true;
}

{% endif %}

{% endfor %}

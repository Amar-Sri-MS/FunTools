{# 

Standard Fungible template for source code for generated structures.

#}
{#

Macros for hiding which size macro to use.

#}
{% if generate_be %}
{% macro toDpuWrapper(field, var) %}
{% if ((generate_swap or field.IsAlwaysBe()) and field.type.IsSwappable()) or field.endian  %}cpu_to_be{{field.type.bit_width}}({{var}}){% else %}{{var}}{% endif %}
{%- endmacro %}
{% elif generate_le %}
{% macro toDpuWrapper(field, var) %}
{% if ((generate_swap or field.IsAlwaysBe()) and field.type.IsSwappable()) or field.endian %}cpu_to_{% if field.IsAlwaysBe() %}be{% else %}le{% endif %}{{field.type.bit_width}}({{var}}){% else %}{{var}}{% endif %}
{%- endmacro %}
{% else %}
{% macro toDpuWrapper(field, var) %}
{% if (field.IsAlwaysBe() and field.type.IsSwappable()) or field.endian %}cpu_to_be{{field.type.bit_width}}({{var}}){% else %}{{var}}{% endif %}
{%- endmacro %}
{% endif %}


// Source file created by generator.py
// Do not change this file;
// change the gen file {{gen_file}} instead.

/* For FunOS and CC-Linux. */
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

#include "{{output_base}}.h"

{% for enum in enums %}
const char *{{enum.name | as_lower}}_names[] = {
      {% for i in range(0, enum.last_value + 1) %}
      "{{enum.NameForValue(i)}}",  /* {{i|as_hex}} */
      {% endfor %}
};

{% endfor %}

{% for flagset in flagsets %}
const char *{{flagset.name | as_lower }}_names[] = {
  {% for var in flagset.VariablesWithNames() %}
    "{{var.name}}", /* {{var.value | as_hex}} */
  {% endfor %}
};

{% endfor %}

{% if generate_json %}

#include <FunOS/nucleus/types.h>
#include <FunOS/utils/common/endian_macros.h>

{% for struct in structs %}

/*
 * Initializes {{struct.name}} structure from JSON representation.
 * Returns false if initialization failed.
 * Caller responsible for determining correct init function(s).
 */
bool {{struct.name}}_json_init(struct fun_json *j,
				{{struct.DeclarationString()}} *s)
{
	memset(s, 0, sizeof({{struct.DeclarationString()}}));
{% for field in struct.fields %}
 {% if field.is_reserved == false %}
  {% if field.type.IsArray() %}
    {% if field.type.ArraySize() > 0 %}

	struct fun_json *{{field.name}}_j = fun_json_lookup(j, "{{field.name}}");
	if ({{field.name}}_j) {
		size_t count = fun_json_array_count({{field.name}}_j);
		assert(count <= {{field.type.ArraySize()}});
		if (count > {{field.type.ArraySize()}}) {
		   return false;
		}
		for (size_t i = 0; i < count; i++) {
			s->{{field | as_mangled}}[i] = {{toDpuWrapper(field, 'fun_json_to_int64(fun_json_array_at(' + field.name + '_j, i), 0)')}};
		}
	}
    {% endif %}
  {% elif field.type.IsRecord() %}
    {% if field.type.base_type.node.is_union %}

	/* TBD - Union - {{field.name}} */
    {% else %}

	struct fun_json *{{field.name}}_j = fun_json_lookup(j, "{{field.name}}");
	if ({{field.name}}_j) {
		/* TBD - Struct - {{field.name}} */
		{{field.type.base_type.node.name}}_json_init({{field.name}}_j, &(s->{{field.name}}));
	}
    {% endif %}
  {% else %}

	struct fun_json *{{field.name}}_j = fun_json_lookup(j, "{{field.name}}");
	if ({{field.name}}_j) {
		s->{{field | as_mangled}} = {{toDpuWrapper(field, 'fun_json_to_int64(' + field.name + '_j, 0)')}};
	}
  {% endif %}
 {% endif %}
{% endfor %}

	return true;
}

/*
 * Returns JSON schema for {{struct.name}} structure.
 */
{# TODO: move data manipulation code outside of template #}
const char *{{struct.name}}_json_schema()
{
  {% set schema_parts = [] %}
{% for field in struct.fields %}
 {% if field.is_reserved == false %}
  {% if field.type.IsArray() %}
    {% if field.type.ArraySize() > 0 %}
      {{ schema_parts.append(field.name + ": {type: array, maxItems: " + field.type.ArraySize()|string + ", items: integer}") or ""}}
    {% endif %}
  {% elif field.type.IsRecord() %}
    {% if field.type.base_type.node.is_union %}

  /* TBD - Union - {{field.name}} */
    {% else %}
  /* TBD - Struct - {{field.name}} */

    {% endif %}
  {% else %}
    {{ schema_parts.append(field.name + ": integer") or "" }}
  {% endif %}
 {% endif %}
{% endfor %}
	return "{type: object, properties:{ {{ schema_parts|join(", ") }} } }";
}


{% endfor %}
{% endif %}

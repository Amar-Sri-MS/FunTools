{# 

Standard Fungible template for source code for generated structures.

#}
// Source file created by generator.py
// Do not change this file;
// change the gen file {{gen_file}} instead.

/* For FunOS and CC-Linux. */
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <assert.h>

#include "{{output_base}}.h"

{% for enum in enums %}
const char *{{enum.name | as_lower}}_names[] = {
      {% for i in range(0, enum.last_value + 1) %}
      "{{enum.NameForValue(i)}}",  /* {{i|as_hex}} */
      {% endfor %}
};

{% endfor %}

{% for flagset in flagsets %}
const char *{{flagset.name | as_lower }}_names[] = {
  {% for var in flagset.VariablesWithNames() %}
    "{{var.name}}", /* {{var.value | as_hex}} */
  {% endfor %}
};

{% endfor %}

{% if generate_json %}
{% for struct in structs %}

/*
 * Initializes {{struct.name}} structure from JSON representation.
 * Returns false if initialization failed.
 * Caller responsible for determining correct init function(s).
 */
bool {{struct.name}}_json_init(struct fun_json *j,
				{{struct.DeclarationString()}} *s)
{
	memset(s, 0, sizeof({{struct.DeclarationString()}}));
{% for field in struct.fields %}
 {% if field.is_reserved == false %}
  {% if field.type.IsArray() %}
    {% if field.type.ArraySize() > 0 %}

	struct fun_json *{{field.name}}_j = fun_json_lookup(j, "{{field.name}}");
	if ({{field.name}}_j) {
		size_t count = fun_json_array_count({{field.name}}_j);
		assert(count <= {{field.type.ArraySize()}});
		for (int i = 0; i < count; i++) {
			s->{{field.name}}[i] = fun_json_to_int64(fun_json_array_at({{field.name}}_j, i), 0);
		}
	}
    {% endif %}
  {% elif field.type.IsRecord() %}
    {% if field.type.base_type.node.is_union %}

	/* TBD - Union - {{field.name}} */
    {% else %}

	struct fun_json *{{field.name}}_j = fun_json_lookup(j, "{{field.name}}");
	if ({{field.name}}_j) {
		/* TBD - Struct - {{field.name}} */
		{{field.type.base_type.node.name}}_json_init({{field.name}}_j, &(s->{{field.name}}));
	}
    {% endif %}
  {% else %}
    {% if field.packed_fields %}

	struct fun_json *{{field.name}}_j = fun_json_lookup(j, "{{field.name}}");
	/* TBD - sub-field {{field.name}} */
	if ({{field.name}}_j) {
		s->{{field.name}} = fun_json_to_int64({{field.name}}_j, 0);
	}
    {% else %}

	struct fun_json *{{field.name}}_j = fun_json_lookup(j, "{{field.name}}");
	if ({{field.name}}_j) {
		s->{{field.name}} = fun_json_to_int64({{field.name}}_j, 0);
	}
    {% endif %}
  {% endif %}
 {% endif %}
{% endfor %}

	return true;
}

{% endfor %}
{% endif %}

# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make install - installs gtest.a + headers
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of the fungible sdk directory
# Set this as necessary
SDKDIR ?= ../../../../../FunSDK

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ..

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : gtest.a

clean :
	rm -f gtest.a *.o

install :
	@if [ -d $(SDKDIR) ]; then echo "installing gtest to '$(SDKDIR)'"; fi
	@if [ ! -d $(SDKDIR) ]; then echo "'$(SDKDIR)' is not a valid sdk directory"; fi
	@if [ -d $(SDKDIR) ]; then \
	mkdir -p $(SDKDIR)/include/gtest; \
	mkdir -p $(SDKDIR)/include/gtest/internal; \
	mkdir -p $(SDKDIR)/include/gtest/internal/custom; \
	mkdir -p $(SDKDIR)/lib; \
	cp $(GTEST_DIR)/include/gtest/*.h $(SDKDIR)/include/gtest/; \
	cp $(GTEST_DIR)/include/gtest/internal/*.h $(SDKDIR)/include/gtest/internal/; \
	cp $(GTEST_DIR)/include/gtest/internal/custom/*.h $(SDKDIR)/include/gtest/internal/custom; \
	cp gtest.a $(SDKDIR)/lib/; \
	fi
# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^


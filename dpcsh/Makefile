
# OS
OS := $(shell uname)

SDKDIR ?= ../../FunSDK
SDK_INSTALL_DIR ?= $(SDKDIR)

MACHINE ?= x86_64

ifeq ($(MACHINE),x86_64)
 TOOLCHAIN_PREFIX :=
 SDK_LIB_SUBDIR := noasan
 SDK_INSTALL_PREFIX :=
else ifeq ($(MACHINE),arm)
 TOOLCHAIN_PREFIX := arm-linux-gnueabi-
 SDK_LIB_SUBDIR :=
 SDK_INSTALL_PREFIX := arm
else ifeq ($(MACHINE),mips64)
 SDK_LIB_SUBDIR :=
 SDK_INSTALL_PREFIX := mips64
else
 $(error Unknown machine type $(MACHINE))
endif

BUILD_ROOT ?= build_$(MACHINE)

# To track version, see if there's a build info in the workspace
# (ie. in Jenkins) otherwise, pull it out of FunSDK. If that doesn't
# work, make it up
ifneq (,$(wildcard $(BUILD_INFO_SDK)))
version := bld_$(shell cat $(BUILD_INFO_SDK))
else ifneq (,$(wildcard $(BUILD_INFO_WORKSPACE)))
version := bld_$(shell cat $(BUILD_INFO_WORKSPACE))
else
version := $(shell git describe --always --dirty=*)
endif
branch := $(shell git rev-parse --short HEAD)

VER     = -DVER=$(version)
BRANCH  = -DBRANCH=$(branch)

ifeq ($(OS),Linux)
ifneq ($(MACHINE),arm)

ifeq ($(MACHINE),x86_64)
LFUNQ_PATH = $(SDKDIR)/FunSDK/host-drivers/$(MACHINE)/user/posix
else
LFUNQ_PATH = $(SDKDIR)/FunSDK/host-drivers/$(MACHINE)/user/native
endif

CFLAGS += -I $(LFUNQ_PATH)/include -DWITH_LIBFUNQ
LDFLAGS += -L $(LFUNQ_PATH)/lib -lfunq
endif
endif

# define header and library location in FunSDK
CFLAGS += -I $(SDKDIR) -I $(SDKDIR)/FunSDK -g -Wall -Werror -Wno-multichar $(BRANCH) $(VER)

# XXX: compatibility with FunOS build parameters
#LDFLAGS += -L $(SDKDIR)/lib/${OS}/x86_64 -lfunclient -fsanitize=address
LDFLAGS += -lpthread -L $(SDKDIR)/lib/$(OS)/$(SDK_LIB_SUBDIR)/$(MACHINE) -lfunclient -ldl

SRCS = dpcsh.c dpcsh_nvme.c dpcsh_libfunq.c dpcsh_macros.c csr_command.c
OBJS = $(addprefix $(BUILD_ROOT)/,$(SRCS:.c=.o))

# Deal with gcc versioning for ASAN
ifneq ($(TOOLCHAIN_PREFIX),)
CC := $(TOOLCHAIN_PREFIX)gcc$(GCC_SUFFIX)
endif

# default target goes first 
all: dpcsh

$(BUILD_ROOT):
	mkdir -p $@

$(BUILD_ROOT)/%.o: %.c $(DEPS) | $(BUILD_ROOT)
	$(CC) -c -o $@ $< $(CFLAGS)

.PHONY: dpcsh
dpcsh: $(BUILD_ROOT)/dpcsh

$(BUILD_ROOT)/dpcsh: $(OBJS)
	$(CC) -o $@ $^ $(LDFLAGS)

install: dpcsh
	mkdir -p $(SDK_INSTALL_DIR)/bin/$(SDK_INSTALL_PREFIX)/$(OS)
# FIXME: remove OS versioning on dpc_client.py when
# integration tests are fixed
	cp dpc_client.py dpctest.py dpc_uboot_env.py auth_firmware.py $(BUILD_ROOT)/dpcsh $(SDK_INSTALL_DIR)/bin/$(SDK_INSTALL_PREFIX)/$(OS)

clean:
	-rm -rf $(BUILD_ROOT) build_*

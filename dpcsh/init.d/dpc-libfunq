#!/bin/sh

# This is a drop-in replacement for dpc which runs over NVMe

BIN_PATH="/usr/bin"
ST_STP_D=/sbin/start-stop-daemon
DPC_SOCKET=/tmp/dpc-funq.sock
DPC_PID_FILE=/tmp/dpc-funq.pid
DEVICE_ID="1dad:0108:ff00"

if [[ ! -f ${ST_STP_D} ]]; then
	echo "${ST_STP_D} not found"
	return 1
fi

start_dpc_proxy()
{
	echo "Starting dpc proxy"
	DEVICE_SLOT=`lspci -d ${DEVICE_ID} | awk '{print $1}'`

	if lspci -k -d ${DEVICE_ID} | grep "in use"; then
		echo "Device is already in use, no need for bind"
	else
		/usr/bin/funq-setup bind funq ${DEVICE_SLOT}
	fi

	OPTS="--background --make-pidfile --pidfile ${DPC_PID_FILE} --startas ${BIN_PATH}/dpcsh"
	CMD="--start -- -q${DEVICE_SLOT} --unix_proxy=${DPC_SOCKET}"

	${ST_STP_D} ${OPTS} ${CMD}

	timeout 60 bash -c -- 'while [ ! -e ${DPC_SOCKET} ]; do echo "Waiting for dpcsh socket to be open" && sleep 2; done'
}

stop_by_pid()
{
	OPTS="--pidfile $1 --retry TERM/10/KILL/5"
	CMD="--stop"

	${ST_STP_D} ${OPTS} ${CMD} || true
	rm $1 || true
}

case "$1" in
start)
	start_dpc_proxy
	echo "done."
	;;

stop)
	echo "Stopping dpc proxy"
	stop_by_pid ${DPC_PID_FILE}
	echo "done."
	;;

*)
	echo "Usage: /etc/init.d/dpc {start|stop}"
	exit 1
	;;
esac

exit 0


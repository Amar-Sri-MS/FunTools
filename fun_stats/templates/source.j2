{#

Template for stats source code generation

-#}
/*
 *  {{file}}
 *
 *  !!!!!AUTO-GENERATED FILE. DO NOT EDIT!!!!
 *
 *  Copyright 2018 Fungible Inc. All rights reserved.
 */

#include <hw/common/stats.h>
#include <string.h>

{%- macro field_add(fld_list) -%}
	{%- for k,v in fld_list.iteritems() -%}
	csr_field_add(csr_data, "{{k}}", {{loop.index0}}, {{v.csr_fld_width}}, {{v.csr_fld_offset}});
	{% endfor %}
{%- endmacro -%}

{%- macro csr_add(csr_list) -%}
	{%- for k,v in csr_list.iteritems() -%}
	memset(&csr, 0x0, sizeof(struct csr_data));
	csr.csr_addr = {{v.addr}};
	csr.csr_width = {{v.width}};
	csr.period_usec = {{v.period_usec}};
	csr.clear_on_read = {{v.clear_on_read}};
	csr.on_demand = {{v.on_demand}};
	csr.n_instances = {{v.n_instances}};
	csr.num_entries = {{v.n_entries}};
	csr.num_fields = {{v.num_fields}};
	csr_data = csr_add(anode, "{{k}}", &csr);
	{{field_add(v.fld_list)}}
	{% endfor -%}
{%- endmacro -%}

{%- macro anode_add(anode_list) -%}
	{%- for k,v in anode_list.iteritems() -%}
	anode = csr_anode_add(ring_props, "{{k}}", {{v.an_addr}}, {{v.an_inst_cnt}}, {{v.skip_addr}});
	{{csr_add(v.csr)}}
	{% endfor -%}
{%- endmacro -%}

{% macro ring_inst_add(rinst_list) -%}
	{%- for k,v in rinst_list.iteritems() -%}
	ring_props = csr_ring_inst_add(ring_node, {{k}}, {{v.ring_inst_addr}});
	{{anode_add(v.anode)}}
	{%- endfor -%}
{%- endmacro %}


void stats_create_csr_db(void)
{{'{'}}
	struct csr_ring *ring_node = NULL;
	struct csr_ring_props *ring_props = NULL;
	struct csr_anode *anode = NULL;
	struct csr_data *csr_data = NULL;
	struct csr_data csr;

	{%- for k,v in gen_objs.iteritems() %}

	ring_node = csr_ring_add("{{k}}");

	{{ring_inst_add(v.ring_inst)}}
	{%- endfor %}
{{'}'}}

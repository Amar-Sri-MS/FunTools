#!/usr/bin/env python3

#
# Debug shell application.
#

import sys
import io
import argcomplete
import argparse
import cmd2
import json
import logging
import os
import string
from cmd2 import with_argparser
from csrutils.csrutils import *
from collections import namedtuple

logger = logging.getLogger("dbgutils")
logger.setLevel(logging.INFO)

#
# Determine whether csr2 mode or csr1 mode based on chip type
#
chip_type_parser = argparse.ArgumentParser()
chip_type_parser.add_argument('-c', nargs=1,  metavar=('chip_type'), dest='chip_type', choices=['f1', 's1', 'f1d1', 's2'], type=str, help='chip type', required = True)
chip_type_parser.add_argument('--agent-mode', dest='agent_mode', action='store_true',
                    help='Enable agent mode')
chip_type_parser.set_defaults(agent_mode=False)
chip_type_parser.add_argument('-dut-name', dest='dut_name', type=str,
                    help='Name of the DUT (Device Under Test)')
chip_type_parser.add_argument('-server-port', dest='server_port', type=int,
                              help='Port for the dbgsh agent, defaults to 65432')
chip_type_parser.set_defaults(server_port=65432)

chip_type_args, chip_type_remaining_args = chip_type_parser.parse_known_args()


print(chip_type_remaining_args)
sys.argv = [sys.argv[0]] + chip_type_remaining_args

# Check if it should be CSR1 or CSR2 mode.
chip_type = chip_type_args.chip_type[0]
csr2_mode = True if chip_type != 'f1' else False

agent_mode = chip_type_args.agent_mode


if agent_mode and not chip_type_args.dut_name:
    print("Agent mode requires a DUT name")
    raise SystemExit

dut_name = chip_type_args.dut_name
server_port = chip_type_args.server_port

logger.debug('chip type: {}, agent_mode: {} , dut_name {}'.format(csr2_mode, agent_mode, dut_name))

# csr2 has dependency on FunHW repo, So, for simplicity of usage don't import csr2utils
if csr2_mode:
    from csr2utils import *
    from csr2utils.csr2utils import *
    csr2utils.load_csr_spec(chip_type_args.chip_type[0])

# Returns action class for field argument min length check
def required_length_append(nmin):
    class CustomAction(argparse.Action):
        def __init__(self,
                     option_strings,
                     dest,
                     nargs=None,
                     const=None,
                     default=None,
                     type=None,
                     choices=None,
                     required=False,
                     help=None,
                     metavar=None):
            argparse.Action.__init__(self,
                                     option_strings=option_strings,
                                     dest=dest,
                                     nargs=nargs,
                                     const=const,
                                     default=default,
                                     type=type,
                                     choices=choices,
                                     required=required,
                                     help=help,
                                     metavar=metavar,
                                     )
            logger.debug('Initializing CustomAction')
            for name,value in sorted(locals().items()):
                if name == 'self' or value is None:
                    continue
                logger.debug('  %s = %r' % (name, value))
            return

        def __call__(self, parser, namespace, values,
                     option_string=None):
            logger.debug('Processing CustomAction for "%s"' % self.dest)
            logger.debug('  parser = %s' % id(parser))
            logger.debug('  values = %r' % values)
            logger.debug('  option_string = %r' % option_string)

            if not nmin<=len(values):
                msg='"{f}" option requires atleast {nmin} arguments'.format(
                        f=option_string,nmin=nmin)
                raise argparse.ArgumentTypeError(msg)
            # Do some arbitrary processing of the input values
            x = getattr(namespace, self.dest)
            if x is None:
                x = list()
            logger.debug(x)
            if isinstance(values, list):
                x.append([ v for v in values ])
            else:
                x.append(values)
            # Save the results in the namespace using the destination
            # variable given to our constructor.
            setattr(namespace, self.dest, x)
    return CustomAction

# Display positional arguments first and then optional arguments
class ArgFormatter(argparse.HelpFormatter):
    # use defined argument order to display usage
    def _format_usage(self, usage, actions, groups, prefix):
        if prefix is None:
            prefix = 'usage: '
        # if usage is specified, use that
        if usage is not None:
            usage = usage % dict(prog=self._prog)
        # if no optionals or positionals are available, usage is just prog
        elif usage is None and not actions:
            usage = '%(prog)s' % dict(prog=self._prog)
        elif usage is None:
            prog = '%(prog)s' % dict(prog=self._prog)
            # build full usage string
            action_usage = self._format_actions_usage(actions, groups) # NEW
            usage = ' '.join([s for s in [prog, action_usage] if s])
            # omit the long line wrapping code
        # prefix with 'usage:'
        return '%s%s\n\n' % (prefix, usage)


class dbgsh(cmd2.Cmd):
    global csr2_mode

    intro = ('Welcome to the debug shell. Type help or ? to list commands.\n'
            '\n\t********* MODE: CSR{}({}) **********\n').format(
                    2 if csr2_mode else 1, chip_type)

    parser = argparse.ArgumentParser(prog='csr', formatter_class=ArgFormatter)
    subparsers = parser.add_subparsers(help='csr sub-command help')

    parser_peek = subparsers.add_parser('peek', help="CSR peek",
                                        formatter_class=ArgFormatter)
    parser_peek.add_argument('csr', nargs=1,help="csr name")
    if not csr2_mode:
        parser_peek.set_defaults(func=csr_peek)
    else:
        parser_peek.set_defaults(func=csr2utils.csr2_peek_args)
    parser_peek.add_argument('-i', nargs=1,
        metavar=('csr_inst'), dest='csr_inst', type=str, help="csr instance")
    parser_peek.add_argument('-e', nargs=1,
        metavar=('csr_entry'), dest='csr_entry', type=str, help="csr entry")
    parser_peek.add_argument('-f', nargs='+',
        metavar=('csr_field'), dest='fields', type=str, help="field_name")
    parser_peek.add_argument('-a', nargs=2,
        metavar=('anode_name', 'anode_inst'), dest='anode', help="anode details")
    parser_peek.add_argument('-r', nargs=2,
        metavar=('ring_name', 'ring_inst'), dest='ring', type=str, help="ring details")
    parser_peek.add_argument('-p', nargs=1,
        metavar=('anode_path'), dest='an_path', type=str, help="anode path")
    parser_peek.add_argument('-c', nargs=1,
        metavar=('chip_inst'), dest='chip_inst', type=str, help="chip(or asic) instance")

    parser_poke = subparsers.add_parser('poke', help="CSR poke",
                                        formatter_class=ArgFormatter)
    if not csr2_mode:
        parser_poke.set_defaults(func=csr_poke)
        parser_poke.add_argument('csr', nargs=1, type=str, help="csr name")
        parser_poke.add_argument('-i', nargs=1,
            metavar=('csr_inst'), dest='csr_inst', type=str, help="csr instance")
        parser_poke.add_argument('-e', nargs=1,
            metavar=('csr_entry'), dest='csr_entry', type=str, help="csr entry")
        parser_poke.add_argument('-a', nargs=2,
            metavar=('anode_name', 'anode_inst'), dest='anode', help="anode details")
        parser_poke.add_argument('-c', nargs=1,
            metavar=('chip_inst'), dest='chip_inst', type=str, help="chip(or asic) instance")
        parser_poke.add_argument('-r', nargs=2,
            metavar=('ring_name', 'ring_inst'), dest='ring', type=str, help="ring details")
        parser_poke.add_argument('-p', nargs=1,
            metavar=('anode_path'), dest='an_path', type=str, help="anode path")
        group = parser_poke.add_mutually_exclusive_group(required=True)
        group.add_argument('-f', nargs='+',
            metavar=('csr_field'), dest='fields', type=str,
            action=required_length_append(2), help="field_name")
        group.add_argument('-v', nargs='+',
            metavar=('raw_value'), dest='raw_value', type=str,
            help="csr value in big-endian 64-bit words")
    else:
        parser_poke.set_defaults(func=csr2utils.csr2_poke_args)
        parser_poke.add_argument('csr', nargs=1, type=str, help="csr name")
        parser_poke.add_argument('vals', nargs='*', type=str,
                                 help="csr values in big-endian 64-bit words")

    if csr2_mode:
        raw_peek = subparsers.add_parser('raw_peek', help="CSR raw peek",
                                         formatter_class=ArgFormatter)
        raw_peek.add_argument('addr', help="csr address")
        raw_peek.add_argument('length', help="csr length (64-bit words)")
        raw_peek.set_defaults(func=csr2utils.csr2_raw_peek_args, agent_mode=agent_mode)

        raw_poke = subparsers.add_parser('raw_poke', help="CSR raw poke",
                                         formatter_class=ArgFormatter)
        raw_poke.add_argument('addr', help="csr address")
        raw_poke.add_argument('vals', nargs='*', help="64-bit words to poke: "
                                                      "(must equal register length)")
        raw_poke.set_defaults(func=csr2utils.csr2_raw_poke_args)

    parser_decode = subparsers.add_parser('decode',
                help="Decode csr bits", formatter_class=ArgFormatter)
    parser_decode.set_defaults(func=csr_decode)
    parser_decode.add_argument('csr', nargs=1, type=str, help="csr name")
    parser_decode.add_argument('-v', nargs='+',
        metavar=('raw_value'), dest='raw_value', type=str,
        help="csr value in big-endian 64-bit words")

    parser_list = subparsers.add_parser('list',
                help="List maching csr instances", formatter_class=ArgFormatter)
    parser_list.add_argument('csr', nargs=1, type=str, help="csr name")
    if not csr2_mode:
        parser_list.set_defaults(func=csr_list)
        parser_list.add_argument('-a', nargs=1,
                    metavar=('anode_name'), dest='anode', help="anode name")
        parser_list.add_argument('-r', nargs=1,
                    metavar=('ring_name'), dest='ring', type=str, help="ring name")
    else:
        parser_list.set_defaults(func=csr2utils.csr2_list)

    if not csr2_mode:
        parser_find = subparsers.add_parser('find',
                help="Find csrs maching sub-string", formatter_class=ArgFormatter)
        parser_find.set_defaults(func=csr_find)
        group = parser_find.add_mutually_exclusive_group(required=True)
        group.add_argument('-s', nargs=1,  metavar=('substring'), dest='substring',
                        type=str, help="substring of csr name")
        group.add_argument('-a ', nargs=1, metavar=('csr_address'),
                        dest='csr_address', type=str,
                        help="CSR address either in decimal or hex")
    else:
        parser_find = subparsers.add_parser('find',
                help="Find csrs maching string", formatter_class=ArgFormatter)
        parser_find.set_defaults(func=csr2utils.csr2_find)
        group = parser_find.add_mutually_exclusive_group(required=True)
        group.add_argument('-s', nargs=1,  metavar=('substring'), dest='substring',
                        type=str, help="regex for matching csr name")

    parser_metadata = subparsers.add_parser('metadata',
                help="Load metadata", formatter_class=ArgFormatter)
    parser_metadata.set_defaults(func=csr_load_metadata)
    metadata_group = parser_metadata.add_mutually_exclusive_group(required=True)
    metadata_group.add_argument('-f', nargs=1, metavar=('sdk_root_dir'), dest='sdk_root_dir',
			type= str,
                        help="Relative or absolute path to sdk_root_dir")
    metadata_group.add_argument('-d', dest='default', action='store_true', help="Get metadata from dochub")

    parser_replay = subparsers.add_parser('replay',
                help="Replay csr config", formatter_class=ArgFormatter)
    parser_replay.set_defaults(func=csr_replay)
    parser_replay.add_argument('replay_file', nargs=1, type=str,
                help="Relative or absolute path to csr replay file")
    parser_replay.add_argument('image', nargs=1, type=str,
                help="Relative or absolute path to funos/u-boot srec format image")
    parser_replay.add_argument('-c', nargs=1,
        metavar=('chip_inst'), dest='chip_inst', type=str, help="chip(or asic) instance")
    parser_replay.add_argument('--chip_type', type=str, default='f1', choices=['f1', 's1'],
                               help='Type of chip for replay')
    parser_replay.add_argument('--emulation', action='store_true',
                               help='Whether this is running on emulation')

    argcomplete.autocomplete(parser)

    @with_argparser(parser)
    def do_csr(self, args):
        'CSR peek/poke utility tool'
        logger.debug(args)
        args.func(args)

    parser_connect = argparse.ArgumentParser(prog='connect', formatter_class=ArgFormatter)
    parser_connect.set_defaults(func=server_connect)
    parser_connect.add_argument('-m', nargs=1, metavar=('mode'), dest='mode',
			choices=['i2c', 'jtag', 'pcie'], help="connection mode")
    parser_connect.add_argument('-c', nargs=1, metavar=('chip'), dest='chip',
			choices=['f1', 's1'], help="chip type")
    parser_connect.add_argument('-p', nargs=1, metavar=('dut_config_file'), dest='dut_cfg_file',
                                type=str, help="dut config file")
    parser_connect.add_argument('dut', nargs=1, type=str,
            help="device id(hint:serial number is device id)")
    parser_connect.add_argument('-f', dest='force', action='store_true', help="force connection")

    @with_argparser(parser_connect)
    def do_connect(self, args):
        'proxy server connect'
        logger.debug(args)
        args.func(args)


    parser_disconnect = argparse.ArgumentParser(prog='disconnect', formatter_class=ArgFormatter)
    parser_disconnect.set_defaults(func=server_disconnect)
    argcomplete.autocomplete(parser_disconnect)

    @with_argparser(parser_disconnect)
    def do_disconnect(self, args):
        'proxy server disconnect'
        logger.debug(args)
        args.func(args)

    def complete_csr(self, key, line, start_index, end_index):
        logger.debug('key: {0} line:{1}'.format(key, line))
        if key:
            tags = line.split()
            if tags[-2] == 'peek' or tags[-2] == 'poke' or tags[-2] == 'list':
                metadata = csr_metadata().get_csr_list()
                return [x for x in metadata if x.startswith(key)]
        else:
            tags = line.split()
            if tags[-1] == 'peek' or tags[-1] == 'poke' or tags[-1] == 'list':
                return csr_metadata().get_csr_list()

    def do_quit(self, args):
        """Quits the program."""
        print("Quitting.")
        raise SystemExit

#Format for data exchange b/w dbgsh agent and client
#version -  Version number, starting with 1 , 4 bytes
#id -       Request identifier specified by the DDR App (I.e., a random identifier for each request, or a monotonic counter).
#           Primarily used for debug and tracking requests between the DDR App and the DBGSH Agent, 4 bytes
#op -       Operation type for the request, 4 bytes
#status -   Status of the request, set by the DBGSH Agent. Zero status is success. Non-zero status is a failure, 4 bytes
#addr -     Register address to read or write, 8 bytes
#val -      Returned read value for CSR read operations and value to write for CSR write operations, 8 bytes
def pack_data(protocol_version, request_id, message_opcode, status, address, value):
    # The format string 'IIIiQQ' packs the data in the order: 4 bytes, 4 bytes, 4 bytes, 4 bytes, 8 bytes, 8 bytes
    packed_data = struct.pack('IIIiQQ', protocol_version, request_id, message_opcode, status, address, value)
    return packed_data

def unpack_data(data):
    return struct.unpack('IIIIQQ', data)

if agent_mode:
    #Port for the dbgsh agent
    PORT = server_port
    #Constants
    FLD_WIDTH=1 #64b words , supports only 1
    AGENT_REQ_CSR_READ=1
    AGENT_REQ_CSR_WRITE=2
    PROTOCOL_VERSION=1

def recv_exact(sock, num_bytes=32):
    chunks = []
    bytes_received = 0
    while bytes_received < num_bytes:
        chunk = sock.recv(num_bytes - bytes_received)
        if not chunk:
            # The connection was closed
            break
        chunks.append(chunk)
        bytes_received += len(chunk)
    return b''.join(chunks)

def start_server(dbg_shell, host='0.0.0.0', port = PORT):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind((host, port))
            s.listen()
            logger.info("Server started on {}:{}".format(host, port))
            #Repeatedly accept connections from the client
            while True:
                #Blocking call only single connection is supported
                conn, addr = s.accept()
                with conn:
                    while True:
                        logger.info("Connected by: {}".format(addr))
                        logger.info("Blocked on recv\n")
                        data = recv_exact(conn)
                        if not data:
                            #The connection has been closed
                            print("Connection closed by peer {}".format(conn.getpeername()))
                            break
                        version, id, op, status, address, val = unpack_data(data)
                        assert version == PROTOCOL_VERSION
                        assert op == AGENT_REQ_CSR_READ or op == AGENT_REQ_CSR_WRITE

                        if op == AGENT_REQ_CSR_READ:
                            #READ CSR
                            logger.info("CSR READ {}".format(address))
                            PeekArgs = namedtuple("PeekArgs", ["addr", "length", "agent_mode"])
                            args = PeekArgs(addr=str(address), length=str(FLD_WIDTH), agent_mode=True)

                            try:
                                sts, val = csr2_raw_peek_args(args)
                                if sts:
                                    iv = str_to_int(val)
                                    status = 0
                                else:
                                    iv = 0; #Invalid value
                                    status = -1
                            except Exception as e:
                                logging.error(traceback.format_exc())
                                iv = 0; #Invalid value
                                status = -1

                            packed_data = pack_data(PROTOCOL_VERSION, id, op, status, address, iv)
                            conn.sendall(packed_data)
                            logger.info("Sent READ RESPONE")
                        elif op == AGENT_REQ_CSR_WRITE:
                            #WRITE CSR
                            PokeArgs = namedtuple('PokeArgs', ['addr', 'vals', 'agent_mode'])
                            args = PokeArgs(addr=str(address), vals=[str(val)], agent_mode=True)
                            logger.info("Doing a CSR WRITE at {} with value {}".format(address, val))

                            try:
                                ret_val = csr2_raw_poke_args(args)
                                if ret_val is True:
                                    status = 0
                                else:
                                    status = -1
                            except Exception as e:
                                logging.error(traceback.format_exc())
                                status = -1

                            packed_data = pack_data(PROTOCOL_VERSION, id, op, status, address, (val))
                            conn.sendall(packed_data)

                        else:
                            #Do nothing, send back the same data with error code
                            packed_data = pack_data(PROTOCOL_VERSION, id, op, -2, address, val)
                            conn.sendall(packed_data)
                            logger.info("Invalid operation")
    except KeyboardInterrupt:
        disconnect_command = 'disconnect'
        dbg_shell.onecmd_plus_hooks(disconnect_command)
        sys.exit(0)

if __name__ == '__main__':
    if agent_mode:
        c = dbgsh()
        logger.info('agent mode')
        cmd_str = 'connect {}'.format(dut_name)
        c.onecmd_plus_hooks(cmd_str)

        start_server(dbg_shell=c)
    else:
        c = dbgsh()
        c.prompt = 'dbgsh > '
        c.allow_redirection = True
        c.cmdloop()

